*, ::before, ::after {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
  --tw-contain-size:  ;
  --tw-contain-layout:  ;
  --tw-contain-paint:  ;
  --tw-contain-style:  ;
}

::backdrop {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
  --tw-contain-size:  ;
  --tw-contain-layout:  ;
  --tw-contain-paint:  ;
  --tw-contain-style:  ;
}

/*
! tailwindcss v3.4.17 | MIT License | https://tailwindcss.com
*/

/*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/

*,
::before,
::after {
  box-sizing: border-box;
  /* 1 */
  border-width: 0;
  /* 2 */
  border-style: solid;
  /* 2 */
  border-color: #e5e7eb;
  /* 2 */
}

::before,
::after {
  --tw-content: '';
}

/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
5. Use the user's configured `sans` font-feature-settings by default.
6. Use the user's configured `sans` font-variation-settings by default.
7. Disable tap highlights on iOS
*/

html,
:host {
  line-height: 1.5;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -moz-tab-size: 4;
  /* 3 */
  -o-tab-size: 4;
     tab-size: 4;
  /* 3 */
  font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  /* 4 */
  font-feature-settings: normal;
  /* 5 */
  font-variation-settings: normal;
  /* 6 */
  -webkit-tap-highlight-color: transparent;
  /* 7 */
}

/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/

body {
  margin: 0;
  /* 1 */
  line-height: inherit;
  /* 2 */
}

/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/

hr {
  height: 0;
  /* 1 */
  color: inherit;
  /* 2 */
  border-top-width: 1px;
  /* 3 */
}

/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/

abbr:where([title]) {
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}

/*
Remove the default font size and weight for headings.
*/

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

/*
Reset links to optimize for opt-in styling instead of opt-out.
*/

a {
  color: inherit;
  text-decoration: inherit;
}

/*
Add the correct font weight in Edge and Safari.
*/

b,
strong {
  font-weight: bolder;
}

/*
1. Use the user's configured `mono` font-family by default.
2. Use the user's configured `mono` font-feature-settings by default.
3. Use the user's configured `mono` font-variation-settings by default.
4. Correct the odd `em` font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  /* 1 */
  font-feature-settings: normal;
  /* 2 */
  font-variation-settings: normal;
  /* 3 */
  font-size: 1em;
  /* 4 */
}

/*
Add the correct font size in all browsers.
*/

small {
  font-size: 80%;
}

/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/

table {
  text-indent: 0;
  /* 1 */
  border-color: inherit;
  /* 2 */
  border-collapse: collapse;
  /* 3 */
}

/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/

button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-feature-settings: inherit;
  /* 1 */
  font-variation-settings: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  font-weight: inherit;
  /* 1 */
  line-height: inherit;
  /* 1 */
  letter-spacing: inherit;
  /* 1 */
  color: inherit;
  /* 1 */
  margin: 0;
  /* 2 */
  padding: 0;
  /* 3 */
}

/*
Remove the inheritance of text transform in Edge and Firefox.
*/

button,
select {
  text-transform: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/

button,
input:where([type='button']),
input:where([type='reset']),
input:where([type='submit']) {
  -webkit-appearance: button;
  /* 1 */
  background-color: transparent;
  /* 2 */
  background-image: none;
  /* 2 */
}

/*
Use the modern Firefox focus style for all focusable elements.
*/

:-moz-focusring {
  outline: auto;
}

/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/

:-moz-ui-invalid {
  box-shadow: none;
}

/*
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
  vertical-align: baseline;
}

/*
Correct the cursor style of increment and decrement buttons in Safari.
*/

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/*
Remove the inner padding in Chrome and Safari on macOS.
*/

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/

::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/*
Add the correct display in Chrome and Safari.
*/

summary {
  display: list-item;
}

/*
Removes the default spacing and border for appropriate elements.
*/

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}

fieldset {
  margin: 0;
  padding: 0;
}

legend {
  padding: 0;
}

ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}

/*
Reset default styling for dialogs.
*/

dialog {
  padding: 0;
}

/*
Prevent resizing textareas horizontally by default.
*/

textarea {
  resize: vertical;
}

/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/

input::-moz-placeholder, textarea::-moz-placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

input::placeholder,
textarea::placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

/*
Set the default cursor for buttons.
*/

button,
[role="button"] {
  cursor: pointer;
}

/*
Make sure disabled buttons don't get the pointer cursor.
*/

:disabled {
  cursor: default;
}

/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block;
  /* 1 */
  vertical-align: middle;
  /* 2 */
}

/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/

img,
video {
  max-width: 100%;
  height: auto;
}

/* Make elements with the HTML hidden attribute stay hidden by default */

[hidden]:where(:not([hidden="until-found"])) {
  display: none;
}

:where(:root),:root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
  color-scheme: light;
  --color-base-100: oklch(100% 0 0);
  --color-base-200: oklch(98% 0 0);
  --color-base-300: oklch(95% 0 0);
  --color-base-content: oklch(21% 0.006 285.885);
  --color-primary: oklch(45% 0.24 277.023);
  --color-primary-content: oklch(93% 0.034 272.788);
  --color-secondary: oklch(65% 0.241 354.308);
  --color-secondary-content: oklch(94% 0.028 342.258);
  --color-accent: oklch(77% 0.152 181.912);
  --color-accent-content: oklch(38% 0.063 188.416);
  --color-neutral: oklch(14% 0.005 285.823);
  --color-neutral-content: oklch(92% 0.004 286.32);
  --color-info: oklch(74% 0.16 232.661);
  --color-info-content: oklch(29% 0.066 243.157);
  --color-success: oklch(76% 0.177 163.223);
  --color-success-content: oklch(37% 0.077 168.94);
  --color-warning: oklch(82% 0.189 84.429);
  --color-warning-content: oklch(41% 0.112 45.904);
  --color-error: oklch(71% 0.194 13.428);
  --color-error-content: oklch(27% 0.105 12.094);
  --radius-selector: 0.5rem;
  --radius-field: 0.25rem;
  --radius-box: 0.5rem;
  --size-selector: 0.25rem;
  --size-field: 0.25rem;
  --border: 1px;
  --depth: 1;
  --noise: 0;
}

@media (prefers-color-scheme: dark) {
  :root:not([data-theme]) {
    color-scheme: dark;
    --color-base-100: oklch(25.33% 0.016 252.42);
    --color-base-200: oklch(23.26% 0.014 253.1);
    --color-base-300: oklch(21.15% 0.012 254.09);
    --color-base-content: oklch(97.807% 0.029 256.847);
    --color-primary: oklch(58% 0.233 277.117);
    --color-primary-content: oklch(96% 0.018 272.314);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}

:root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
  color-scheme: light;
  --color-base-100: oklch(100% 0 0);
  --color-base-200: oklch(98% 0 0);
  --color-base-300: oklch(95% 0 0);
  --color-base-content: oklch(21% 0.006 285.885);
  --color-primary: oklch(45% 0.24 277.023);
  --color-primary-content: oklch(93% 0.034 272.788);
  --color-secondary: oklch(65% 0.241 354.308);
  --color-secondary-content: oklch(94% 0.028 342.258);
  --color-accent: oklch(77% 0.152 181.912);
  --color-accent-content: oklch(38% 0.063 188.416);
  --color-neutral: oklch(14% 0.005 285.823);
  --color-neutral-content: oklch(92% 0.004 286.32);
  --color-info: oklch(74% 0.16 232.661);
  --color-info-content: oklch(29% 0.066 243.157);
  --color-success: oklch(76% 0.177 163.223);
  --color-success-content: oklch(37% 0.077 168.94);
  --color-warning: oklch(82% 0.189 84.429);
  --color-warning-content: oklch(41% 0.112 45.904);
  --color-error: oklch(71% 0.194 13.428);
  --color-error-content: oklch(27% 0.105 12.094);
  --radius-selector: 0.5rem;
  --radius-field: 0.25rem;
  --radius-box: 0.5rem;
  --size-selector: 0.25rem;
  --size-field: 0.25rem;
  --border: 1px;
  --depth: 1;
  --noise: 0;
}

:root:has(input.theme-controller[value=dark]:checked),[data-theme=dark] {
  color-scheme: dark;
  --color-base-100: oklch(25.33% 0.016 252.42);
  --color-base-200: oklch(23.26% 0.014 253.1);
  --color-base-300: oklch(21.15% 0.012 254.09);
  --color-base-content: oklch(97.807% 0.029 256.847);
  --color-primary: oklch(58% 0.233 277.117);
  --color-primary-content: oklch(96% 0.018 272.314);
  --color-secondary: oklch(65% 0.241 354.308);
  --color-secondary-content: oklch(94% 0.028 342.258);
  --color-accent: oklch(77% 0.152 181.912);
  --color-accent-content: oklch(38% 0.063 188.416);
  --color-neutral: oklch(14% 0.005 285.823);
  --color-neutral-content: oklch(92% 0.004 286.32);
  --color-info: oklch(74% 0.16 232.661);
  --color-info-content: oklch(29% 0.066 243.157);
  --color-success: oklch(76% 0.177 163.223);
  --color-success-content: oklch(37% 0.077 168.94);
  --color-warning: oklch(82% 0.189 84.429);
  --color-warning-content: oklch(41% 0.112 45.904);
  --color-error: oklch(71% 0.194 13.428);
  --color-error-content: oklch(27% 0.105 12.094);
  --radius-selector: 0.5rem;
  --radius-field: 0.25rem;
  --radius-box: 0.5rem;
  --size-selector: 0.25rem;
  --size-field: 0.25rem;
  --border: 1px;
  --depth: 1;
  --noise: 0;
}

:where( :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) ) {
  scrollbar-gutter: stable;
  background-image: linear-gradient(var(--color-base-100), var(--color-base-100));
  --root-bg: color-mix(in srgb, var(--color-base-100), oklch(0% 0 0) 40%);
}

@property --radialprogress {
  syntax: "<percentage>";

  inherits: true;

  initial-value: 0%;
}

:root {
  --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='200' height='200' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
}

:root, [data-theme] {
  background-color: var(--root-bg, var(--color-base-100));
  color: var(--color-base-content);
}

:root {
  scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
}

:root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not([class*="drawer-open"]) > .drawer-toggle:checked ) {
  overflow: hidden;
}

*,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
  border-color: var(--color-gray-200, currentcolor);
}

.\!container {
  width: 100% !important;
}

.container {
  width: 100%;
}

@media (min-width: 640px) {
  .\!container {
    max-width: 640px !important;
  }

  .container {
    max-width: 640px;
  }
}

@media (min-width: 768px) {
  .\!container {
    max-width: 768px !important;
  }

  .container {
    max-width: 768px;
  }
}

@media (min-width: 1024px) {
  .\!container {
    max-width: 1024px !important;
  }

  .container {
    max-width: 1024px;
  }
}

@media (min-width: 1280px) {
  .\!container {
    max-width: 1280px !important;
  }

  .container {
    max-width: 1280px;
  }
}

@media (min-width: 1536px) {
  .\!container {
    max-width: 1536px !important;
  }

  .container {
    max-width: 1536px;
  }
}

.prose {
  color: var(--tw-prose-body);
  max-width: 65ch;
}

.prose :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em;
}

.prose :where([class~="lead"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-lead);
  font-size: 1.25em;
  line-height: 1.6;
  margin-top: 1.2em;
  margin-bottom: 1.2em;
}

.prose :where(a):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-links);
  text-decoration: underline;
  font-weight: 500;
}

.prose :where(strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-bold);
  font-weight: 600;
}

.prose :where(a strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(blockquote strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(thead th strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: decimal;
  margin-top: 1.25em;
  margin-bottom: 1.25em;
  padding-inline-start: 1.625em;
}

.prose :where(ol[type="A"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: upper-alpha;
}

.prose :where(ol[type="a"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: lower-alpha;
}

.prose :where(ol[type="A" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: upper-alpha;
}

.prose :where(ol[type="a" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: lower-alpha;
}

.prose :where(ol[type="I"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: upper-roman;
}

.prose :where(ol[type="i"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: lower-roman;
}

.prose :where(ol[type="I" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: upper-roman;
}

.prose :where(ol[type="i" s]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: lower-roman;
}

.prose :where(ol[type="1"]):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: decimal;
}

.prose :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: disc;
  margin-top: 1.25em;
  margin-bottom: 1.25em;
  padding-inline-start: 1.625em;
}

.prose :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
  font-weight: 400;
  color: var(--tw-prose-counters);
}

.prose :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
  color: var(--tw-prose-bullets);
}

.prose :where(dt):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  margin-top: 1.25em;
}

.prose :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-color: var(--tw-prose-hr);
  border-top-width: 1px;
  margin-top: 3em;
  margin-bottom: 3em;
}

.prose :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 500;
  font-style: italic;
  color: var(--tw-prose-quotes);
  border-inline-start-width: 0.25rem;
  border-inline-start-color: var(--tw-prose-quote-borders);
  quotes: "\201C""\201D""\2018""\2019";
  margin-top: 1.6em;
  margin-bottom: 1.6em;
  padding-inline-start: 1em;
}

.prose :where(blockquote p:first-of-type):not(:where([class~="not-prose"],[class~="not-prose"] *))::before {
  content: open-quote;
}

.prose :where(blockquote p:last-of-type):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
  content: close-quote;
}

.prose :where(h1):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 800;
  font-size: 2.25em;
  margin-top: 0;
  margin-bottom: 0.8888889em;
  line-height: 1.1111111;
}

.prose :where(h1 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 900;
  color: inherit;
}

.prose :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 700;
  font-size: 1.5em;
  margin-top: 2em;
  margin-bottom: 1em;
  line-height: 1.3333333;
}

.prose :where(h2 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 800;
  color: inherit;
}

.prose :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  font-size: 1.25em;
  margin-top: 1.6em;
  margin-bottom: 0.6em;
  line-height: 1.6;
}

.prose :where(h3 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 700;
  color: inherit;
}

.prose :where(h4):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  margin-top: 1.5em;
  margin-bottom: 0.5em;
  line-height: 1.5;
}

.prose :where(h4 strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 700;
  color: inherit;
}

.prose :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}

.prose :where(picture):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  display: block;
  margin-top: 2em;
  margin-bottom: 2em;
}

.prose :where(video):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}

.prose :where(kbd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 500;
  font-family: inherit;
  color: var(--tw-prose-kbd);
  box-shadow: 0 0 0 1px rgb(var(--tw-prose-kbd-shadows) / 10%), 0 3px 0 rgb(var(--tw-prose-kbd-shadows) / 10%);
  font-size: 0.875em;
  border-radius: 0.3125rem;
  padding-top: 0.1875em;
  padding-inline-end: 0.375em;
  padding-bottom: 0.1875em;
  padding-inline-start: 0.375em;
}

.prose :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-code);
  font-weight: 600;
  font-size: 0.875em;
}

.prose :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *))::before {
  content: "`";
}

.prose :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
  content: "`";
}

.prose :where(a code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(h1 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(h2 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
  font-size: 0.875em;
}

.prose :where(h3 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
  font-size: 0.9em;
}

.prose :where(h4 code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(blockquote code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(thead th code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-pre-code);
  background-color: var(--tw-prose-pre-bg);
  overflow-x: auto;
  font-weight: 400;
  font-size: 0.875em;
  line-height: 1.7142857;
  margin-top: 1.7142857em;
  margin-bottom: 1.7142857em;
  border-radius: 0.375rem;
  padding-top: 0.8571429em;
  padding-inline-end: 1.1428571em;
  padding-bottom: 0.8571429em;
  padding-inline-start: 1.1428571em;
}

.prose :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  background-color: transparent;
  border-width: 0;
  border-radius: 0;
  padding: 0;
  font-weight: inherit;
  color: inherit;
  font-size: inherit;
  font-family: inherit;
  line-height: inherit;
}

.prose :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *))::before {
  content: none;
}

.prose :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
  content: none;
}

.prose :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  width: 100%;
  table-layout: auto;
  margin-top: 2em;
  margin-bottom: 2em;
  font-size: 0.875em;
  line-height: 1.7142857;
}

.prose :where(thead):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--tw-prose-th-borders);
}

.prose :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  vertical-align: bottom;
  padding-inline-end: 0.5714286em;
  padding-bottom: 0.5714286em;
  padding-inline-start: 0.5714286em;
}

.prose :where(tbody tr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--tw-prose-td-borders);
}

.prose :where(tbody tr:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-bottom-width: 0;
}

.prose :where(tbody td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  vertical-align: baseline;
}

.prose :where(tfoot):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-top-width: 1px;
  border-top-color: var(--tw-prose-th-borders);
}

.prose :where(tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  vertical-align: top;
}

.prose :where(th, td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  text-align: start;
}

.prose :where(figure > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
  margin-bottom: 0;
}

.prose :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-captions);
  font-size: 0.875em;
  line-height: 1.4285714;
  margin-top: 0.8571429em;
}

.prose {
  --tw-prose-body: #374151;
  --tw-prose-headings: #111827;
  --tw-prose-lead: #4b5563;
  --tw-prose-links: #111827;
  --tw-prose-bold: #111827;
  --tw-prose-counters: #6b7280;
  --tw-prose-bullets: #d1d5db;
  --tw-prose-hr: #e5e7eb;
  --tw-prose-quotes: #111827;
  --tw-prose-quote-borders: #e5e7eb;
  --tw-prose-captions: #6b7280;
  --tw-prose-kbd: #111827;
  --tw-prose-kbd-shadows: 17 24 39;
  --tw-prose-code: #111827;
  --tw-prose-pre-code: #e5e7eb;
  --tw-prose-pre-bg: #1f2937;
  --tw-prose-th-borders: #d1d5db;
  --tw-prose-td-borders: #e5e7eb;
  --tw-prose-invert-body: #d1d5db;
  --tw-prose-invert-headings: #fff;
  --tw-prose-invert-lead: #9ca3af;
  --tw-prose-invert-links: #fff;
  --tw-prose-invert-bold: #fff;
  --tw-prose-invert-counters: #9ca3af;
  --tw-prose-invert-bullets: #4b5563;
  --tw-prose-invert-hr: #374151;
  --tw-prose-invert-quotes: #f3f4f6;
  --tw-prose-invert-quote-borders: #374151;
  --tw-prose-invert-captions: #9ca3af;
  --tw-prose-invert-kbd: #fff;
  --tw-prose-invert-kbd-shadows: 255 255 255;
  --tw-prose-invert-code: #fff;
  --tw-prose-invert-pre-code: #d1d5db;
  --tw-prose-invert-pre-bg: rgb(0 0 0 / 50%);
  --tw-prose-invert-th-borders: #4b5563;
  --tw-prose-invert-td-borders: #374151;
  font-size: 1rem;
  line-height: 1.75;
}

.prose :where(picture > img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
  margin-bottom: 0;
}

.prose :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0.5em;
  margin-bottom: 0.5em;
}

.prose :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-inline-start: 0.375em;
}

.prose :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-inline-start: 0.375em;
}

.prose :where(.prose > ul > li p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0.75em;
  margin-bottom: 0.75em;
}

.prose :where(.prose > ul > li > p:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 1.25em;
}

.prose :where(.prose > ul > li > p:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-bottom: 1.25em;
}

.prose :where(.prose > ol > li > p:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 1.25em;
}

.prose :where(.prose > ol > li > p:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-bottom: 1.25em;
}

.prose :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0.75em;
  margin-bottom: 0.75em;
}

.prose :where(dl):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em;
}

.prose :where(dd):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0.5em;
  padding-inline-start: 1.625em;
}

.prose :where(hr + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.prose :where(h2 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.prose :where(h3 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.prose :where(h4 + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.prose :where(thead th:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-inline-start: 0;
}

.prose :where(thead th:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-inline-end: 0;
}

.prose :where(tbody td, tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-top: 0.5714286em;
  padding-inline-end: 0.5714286em;
  padding-bottom: 0.5714286em;
  padding-inline-start: 0.5714286em;
}

.prose :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-inline-start: 0;
}

.prose :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-inline-end: 0;
}

.prose :where(figure):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}

.prose :where(.prose > :first-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.prose :where(.prose > :last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-bottom: 0;
}

.tooltip {
  position: relative;
  display: inline-block;
  --tt-bg: var(--color-neutral);
  --tt-off: calc(100% + 0.5rem);
  --tt-tail: calc(100% + 1px + 0.25rem);
}

.tooltip > :where(.tooltip-content), .tooltip:where([data-tip]):before {
  position: absolute;
  max-width: 20rem;
  border-radius: var(--radius-field);
  padding-inline: calc(0.25rem * 2);
  padding-block: calc(0.25rem * 1);
  text-align: center;
  white-space: normal;
  color: var(--color-neutral-content);
  opacity: 0%;
  font-size: 0.875rem;
  line-height: 1.25;
  background-color: var(--tt-bg);
  width: -moz-max-content;
  width: max-content;
  pointer-events: none;
  z-index: 2;
  --tw-content: attr(data-tip);
  content: var(--tw-content);
}

@media (prefers-reduced-motion: no-preference) {
  .tooltip > :where(.tooltip-content), .tooltip:where([data-tip]):before {
    transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms;
  }

  .tooltip:after {
    transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms;
  }
}

.tooltip:after {
  position: absolute;
  opacity: 0%;
  background-color: var(--tt-bg);
  content: "";
  pointer-events: none;
  width: 0.625rem;
  height: 0.25rem;
  display: block;
  -webkit-mask-repeat: no-repeat;
          mask-repeat: no-repeat;
  -webkit-mask-position: -1px 0;
          mask-position: -1px 0;
  --mask-tooltip: url("data:image/svg+xml,%3Csvg width='10' height='4' viewBox='0 0 8 4' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0.500009 1C3.5 1 3.00001 4 5.00001 4C7 4 6.5 1 9.5 1C10 1 10 0.499897 10 0H0C-1.99338e-08 0.5 0 1 0.500009 1Z' fill='black'/%3E%3C/svg%3E%0A");
  -webkit-mask-image: var(--mask-tooltip);
          mask-image: var(--mask-tooltip);
}

.tooltip.tooltip-open > .tooltip-content, .tooltip.tooltip-open[data-tip]:before, .tooltip.tooltip-open:after, .tooltip[data-tip]:not([data-tip=""]):hover > .tooltip-content, .tooltip[data-tip]:not([data-tip=""]):hover[data-tip]:before, .tooltip[data-tip]:not([data-tip=""]):hover:after, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover > .tooltip-content, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover[data-tip]:before, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover:after, .tooltip:has(:focus-visible) > .tooltip-content, .tooltip:has(:focus-visible)[data-tip]:before, .tooltip:has(:focus-visible):after {
  opacity: 100%;
  --tt-pos: 0rem;
}

@media (prefers-reduced-motion: no-preference) {
  .tooltip.tooltip-open > .tooltip-content, .tooltip.tooltip-open[data-tip]:before, .tooltip.tooltip-open:after, .tooltip[data-tip]:not([data-tip=""]):hover > .tooltip-content, .tooltip[data-tip]:not([data-tip=""]):hover[data-tip]:before, .tooltip[data-tip]:not([data-tip=""]):hover:after, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover > .tooltip-content, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover[data-tip]:before, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover:after, .tooltip:has(:focus-visible) > .tooltip-content, .tooltip:has(:focus-visible)[data-tip]:before, .tooltip:has(:focus-visible):after {
    transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0s, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  }
}

.tooltip > .tooltip-content, .tooltip[data-tip]:before, .tooltip-top > .tooltip-content, .tooltip-top[data-tip]:before {
  transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
  inset: auto auto var(--tt-off) 50%;
}

.tooltip:after, .tooltip-top:after {
  transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
  inset: auto auto var(--tt-tail) 50%;
}

.tooltip-success {
  --tt-bg: var(--color-success);
}

.tooltip-success > .tooltip-content, .tooltip-success[data-tip]:before {
  color: var(--color-success-content);
}

.\!dropdown {
  position: relative !important;
  display: inline-block !important;
  position-area: var(--anchor-v, bottom) var(--anchor-h, span-right) !important;
}

.dropdown {
  position: relative;
  display: inline-block;
  position-area: var(--anchor-v, bottom) var(--anchor-h, span-right);
}

.\!dropdown > *:not(summary):focus {
  --tw-outline-style: none !important;
  outline-style: none !important;
}

.dropdown > *:not(summary):focus {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .\!dropdown > *:not(summary):focus {
    outline: 2px solid transparent !important;
    outline-offset: 2px !important;
  }

  .dropdown > *:not(summary):focus {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }
}

.\!dropdown .dropdown-content {
  position: absolute !important;
}

.dropdown .dropdown-content {
  position: absolute;
}

.\!dropdown:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within) .dropdown-content {
  display: none !important;
  transform-origin: top !important;
  opacity: 0% !important;
  scale: 95% !important;
}

.dropdown:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within) .dropdown-content {
  display: none;
  transform-origin: top;
  opacity: 0%;
  scale: 95%;
}

.\!dropdown[popover], .\!dropdown .dropdown-content {
  z-index: 999 !important;
}

.dropdown[popover], .dropdown .dropdown-content {
  z-index: 999;
}

.\!dropdown[popover], .\!dropdown .dropdown-content {
  z-index: 999 !important;
}

@media (prefers-reduced-motion: no-preference) {
  .\!dropdown[popover], .\!dropdown .dropdown-content {
    animation: dropdown 0.2s !important;
    transition-property: opacity, scale, display !important;
    transition-behavior: allow-discrete !important;
    transition-duration: 0.2s !important;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !important;
  }

  .dropdown[popover], .dropdown .dropdown-content {
    animation: dropdown 0.2s;
    transition-property: opacity, scale, display;
    transition-behavior: allow-discrete;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  }

  .\!dropdown[popover], .\!dropdown .dropdown-content {
    animation: dropdown 0.2s !important;
    transition-property: opacity, scale, display !important;
    transition-behavior: allow-discrete !important;
    transition-duration: 0.2s !important;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !important;
  }
}

@starting-style {
  .\!dropdown[popover], .\!dropdown .dropdown-content {
    scale: 95% !important;
    opacity: 0 !important;
  }

  .dropdown[popover], .dropdown .dropdown-content {
    scale: 95%;
    opacity: 0;
  }

  .\!dropdown[popover], .\!dropdown .dropdown-content {
    scale: 95% !important;
    opacity: 0 !important;
  }
}

.\!dropdown.dropdown-open > [tabindex]:first-child, .\!dropdown:not(.dropdown-hover):focus > [tabindex]:first-child, .\!dropdown:focus-within > [tabindex]:first-child {
  pointer-events: none !important;
}

.dropdown.dropdown-open > [tabindex]:first-child, .dropdown:not(.dropdown-hover):focus > [tabindex]:first-child, .dropdown:focus-within > [tabindex]:first-child {
  pointer-events: none;
}

.\!dropdown.dropdown-open > [tabindex]:first-child, .\!dropdown:not(.dropdown-hover):focus > [tabindex]:first-child, .\!dropdown:focus-within > [tabindex]:first-child {
  pointer-events: none !important;
}

.\!dropdown.dropdown-open .dropdown-content, .\!dropdown:not(.dropdown-hover):focus .dropdown-content, .\!dropdown:focus-within .dropdown-content {
  opacity: 100% !important;
}

.dropdown.dropdown-open .dropdown-content, .dropdown:not(.dropdown-hover):focus .dropdown-content, .dropdown:focus-within .dropdown-content {
  opacity: 100%;
}

.\!dropdown.dropdown-open .dropdown-content, .\!dropdown:not(.dropdown-hover):focus .dropdown-content, .\!dropdown:focus-within .dropdown-content {
  opacity: 100% !important;
}

.\!dropdown.dropdown-hover:hover .dropdown-content {
  opacity: 100% !important;
  scale: 100% !important;
}

.dropdown.dropdown-hover:hover .dropdown-content {
  opacity: 100%;
  scale: 100%;
}

.\!dropdown:is(details) summary::-webkit-details-marker {
  display: none !important;
}

.dropdown:is(details) summary::-webkit-details-marker {
  display: none;
}

.\!dropdown.dropdown-open .dropdown-content, .\!dropdown:focus .dropdown-content, .\!dropdown:focus-within .dropdown-content {
  scale: 100% !important;
}

.dropdown.dropdown-open .dropdown-content, .dropdown:focus .dropdown-content, .dropdown:focus-within .dropdown-content {
  scale: 100%;
}

.\!dropdown.dropdown-open .dropdown-content, .\!dropdown:focus .dropdown-content, .\!dropdown:focus-within .dropdown-content {
  scale: 100% !important;
}

.\!dropdown:where([popover]) {
  background: #0000 !important;
}

.dropdown:where([popover]) {
  background: #0000;
}

.\!dropdown[popover] {
  position: fixed !important;
  color: inherit !important;
}

.dropdown[popover] {
  position: fixed;
  color: inherit;
}

@supports not (position-area: bottom) {
  .\!dropdown[popover] {
    margin: auto !important;
  }

  .\!dropdown[popover].dropdown-open:not(:popover-open) {
    display: none !important;
    transform-origin: top !important;
    opacity: 0% !important;
    scale: 95% !important;
  }

  .\!dropdown[popover]::backdrop {
    background-color: color-mix(in oklab, #000 30%, #0000) !important;
  }

  .dropdown[popover] {
    margin: auto;
  }

  .dropdown[popover].dropdown-open:not(:popover-open) {
    display: none;
    transform-origin: top;
    opacity: 0%;
    scale: 95%;
  }

  .dropdown[popover]::backdrop {
    background-color: color-mix(in oklab, #000 30%, #0000);
  }

  .\!dropdown[popover] {
    margin: auto !important;
  }

  .\!dropdown[popover].dropdown-open:not(:popover-open) {
    display: none !important;
    transform-origin: top !important;
    opacity: 0% !important;
    scale: 95% !important;
  }

  .\!dropdown[popover]::backdrop {
    background-color: color-mix(in oklab, #000 30%, #0000) !important;
  }

  .\!dropdown[popover] {
    margin: auto !important;
  }

  .\!dropdown[popover].dropdown-open:not(:popover-open) {
    display: none !important;
    transform-origin: top !important;
    opacity: 0% !important;
    scale: 95% !important;
  }

  .\!dropdown[popover]::backdrop {
    background-color: color-mix(in oklab, #000 30%, #0000) !important;
  }
}

.\!dropdown[popover]:not(.dropdown-open, :popover-open) {
  display: none !important;
  transform-origin: top !important;
  opacity: 0% !important;
  scale: 95% !important;
}

.dropdown[popover]:not(.dropdown-open, :popover-open) {
  display: none;
  transform-origin: top;
  opacity: 0%;
  scale: 95%;
}

.dropdown-start :where(.dropdown-content) {
  inset-inline-end: auto;
  translate: 0 0;
}

[dir="rtl"] .dropdown-start :where(.dropdown-content) {
  translate: 0 0;
}

.dropdown-start.dropdown-left {
  --anchor-h: left;
  --anchor-v: span-bottom;
}

.dropdown-start.dropdown-left .dropdown-content {
  top: calc(0.25rem * 0);
  bottom: auto;
}

.dropdown-start.dropdown-right {
  --anchor-h: right;
  --anchor-v: span-bottom;
}

.dropdown-start.dropdown-right .dropdown-content {
  top: calc(0.25rem * 0);
  bottom: auto;
}

.dropdown-center :where(.dropdown-content) {
  inset-inline-end: calc(1/2 * 100%);
  translate: 50% 0;
}

[dir="rtl"] .dropdown-center :where(.dropdown-content) {
  translate: -50% 0;
}

.dropdown-center.dropdown-left {
  --anchor-h: left;
  --anchor-v: center;
}

.dropdown-center.dropdown-left .dropdown-content {
  top: auto;
  bottom: calc(1/2 * 100%);
  translate: 0 50%;
}

.dropdown-center.dropdown-right {
  --anchor-h: right;
  --anchor-v: center;
}

.dropdown-center.dropdown-right .dropdown-content {
  top: auto;
  bottom: calc(1/2 * 100%);
  translate: 0 50%;
}

.dropdown-end {
  --anchor-h: span-left;
}

.dropdown-end :where(.dropdown-content) {
  inset-inline-end: calc(0.25rem * 0);
  translate: 0 0;
}

[dir="rtl"] .dropdown-end :where(.dropdown-content) {
  translate: 0 0;
}

.dropdown-end.dropdown-left {
  --anchor-h: left;
  --anchor-v: span-top;
}

.dropdown-end.dropdown-left .dropdown-content {
  top: auto;
  bottom: calc(0.25rem * 0);
}

.dropdown-end.dropdown-right {
  --anchor-h: right;
  --anchor-v: span-top;
}

.dropdown-end.dropdown-right .dropdown-content {
  top: auto;
  bottom: calc(0.25rem * 0);
}

.dropdown-left {
  --anchor-h: left;
  --anchor-v: span-bottom;
}

.dropdown-left .dropdown-content {
  inset-inline-end: 100%;
  top: calc(0.25rem * 0);
  bottom: auto;
  transform-origin: right;
}

.dropdown-right {
  --anchor-h: right;
  --anchor-v: span-bottom;
}

.dropdown-right .dropdown-content {
  inset-inline-start: 100%;
  top: calc(0.25rem * 0);
  bottom: auto;
  transform-origin: left;
}

.dropdown-bottom {
  --anchor-v: bottom;
}

.dropdown-bottom .dropdown-content {
  top: 100%;
  bottom: auto;
  transform-origin: top;
}

.dropdown-top {
  --anchor-v: top;
}

.dropdown-top .dropdown-content {
  top: auto;
  bottom: 100%;
  transform-origin: bottom;
}

@keyframes dropdown {
  0% {
    opacity: 0;
  }
}

.hero {
  display: grid;
  width: 100%;
  place-items: center;
  background-size: cover;
  background-position: center;
}

.hero > * {
  grid-column-start: 1;
  grid-row-start: 1;
}

.hero-content {
  isolation: isolate;
  display: flex;
  max-width: 80rem;
  align-items: center;
  justify-content: center;
  gap: calc(0.25rem * 4);
  padding: calc(0.25rem * 4);
}

.radio {
  position: relative;
  display: inline-block;
  flex-shrink: 0;
  cursor: pointer;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  border-radius: calc(infinity * 1px);
  padding: calc(0.25rem * 1);
  vertical-align: middle;
  border: var(--border) solid var(--input-color, color-mix(in srgb, currentColor 20%, #0000));
  box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset;
  --size: calc(var(--size-selector, 0.25rem) * 6);
  width: var(--size);
  height: var(--size);
  color: var(--input-color, currentColor);
}

.radio:before {
  display: block;
  width: 100%;
  height: 100%;
  border-radius: calc(infinity * 1px);
  --tw-content: "";
  content: var(--tw-content);
  background-size: auto, calc(var(--noise) * 100%);
  background-image: none, var(--fx-noise);
}

.radio:focus-visible {
  outline: 2px solid currentColor;
}

.radio:checked, .radio[aria-checked="true"] {
  border-color: currentColor;
  background-color: var(--color-base-100);
}

@media (prefers-reduced-motion: no-preference) {
  .radio:checked, .radio[aria-checked="true"] {
    animation: radio 0.2s ease-out;
  }
}

.radio:checked:before, .radio[aria-checked="true"]:before {
  background-color: currentColor;
  box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
}

@media (forced-colors: active) {
  .radio:checked:before, .radio[aria-checked="true"]:before {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
    outline-offset: calc(1px * -1);
  }
}

@media print {
  .radio:checked:before, .radio[aria-checked="true"]:before {
    outline: 0.25rem solid;
    outline-offset: -1rem;
  }
}

.radio:disabled {
  cursor: not-allowed;
  opacity: 20%;
}

@keyframes radio {
  0% {
    padding: 5px;
  }

  50% {
    padding: 3px;
  }
}

@keyframes toast {
  0% {
    scale: 0.9;
    opacity: 0;
  }

  100% {
    scale: 1;
    opacity: 1;
  }
}

.stats {
  position: relative;
  display: inline-grid;
  grid-auto-flow: column;
  overflow-x: auto;
  border-radius: var(--radius-box);
}

.stat {
  display: inline-grid;
  width: 100%;
  -moz-column-gap: calc(0.25rem * 4);
       column-gap: calc(0.25rem * 4);
  padding-inline: calc(0.25rem * 6);
  padding-block: calc(0.25rem * 4);
  grid-template-columns: repeat(1, 1fr);
}

.stat:not(:last-child) {
  border-inline-end: var(--border) dashed color-mix(in oklab, currentColor 10%, #0000);
  border-block-end: none;
}

.stats-horizontal .stat:not(:last-child) {
  border-inline-end: var(--border) dashed color-mix(in oklab, currentColor 10%, #0000);
  border-block-end: none;
}

.stats-vertical .stat:not(:last-child) {
  border-inline-end: none;
  border-block-end: var(--border) dashed color-mix(in oklab, currentColor 10%, #0000);
}

.drawer {
  position: relative;
  display: grid;
  width: 100%;
  grid-auto-columns: max-content auto;
}

.drawer-content {
  grid-column-start: 2;
  grid-row-start: 1;
  min-width: calc(0.25rem * 0);
}

.drawer-side {
  pointer-events: none;
  visibility: hidden;
  position: fixed;
  inset-inline-start: calc(0.25rem * 0);
  top: calc(0.25rem * 0);
  z-index: 10;
  grid-column-start: 1;
  grid-row-start: 1;
  display: grid;
  width: 100%;
  grid-template-columns: repeat(1, minmax(0, 1fr));
  grid-template-rows: repeat(1, minmax(0, 1fr));
  align-items: flex-start;
  justify-items: start;
  overflow-x: hidden;
  overflow-y: hidden;
  overscroll-behavior: contain;
  opacity: 0%;
  transition: opacity 0.2s ease-out 0.1s allow-discrete, visibility 0.3s ease-out 0.1s allow-discrete;
  height: 100vh;
  height: 100dvh;
}

.drawer-side > .drawer-overlay {
  position: sticky;
  top: calc(0.25rem * 0);
  cursor: pointer;
  place-self: stretch;
  background-color: oklch(0% 0 0 / 40%);
}

.drawer-side > * {
  grid-column-start: 1;
  grid-row-start: 1;
}

.drawer-side > *:not(.drawer-overlay) {
  will-change: transform;
  transition: translate 0.3s ease-out;
  translate: -100%;
}

[dir="rtl"] .drawer-side > *:not(.drawer-overlay) {
  translate: 100%;
}

.drawer-toggle {
  position: fixed;
  height: calc(0.25rem * 0);
  width: calc(0.25rem * 0);
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  opacity: 0%;
}

.drawer-toggle:checked ~ .drawer-side {
  pointer-events: auto;
  visibility: visible;
  overflow-y: auto;
  opacity: 100%;
}

.drawer-toggle:checked ~ .drawer-side > *:not(.drawer-overlay) {
  translate: 0%;
}

.drawer-toggle:focus-visible ~ .drawer-content label.drawer-button {
  outline: 2px solid;
  outline-offset: 2px;
}

.drawer-end > .drawer-toggle ~ .drawer-content {
  grid-column-start: 1;
}

.drawer-end > .drawer-toggle ~ .drawer-side {
  grid-column-start: 2;
  justify-items: end;
}

.drawer-end > .drawer-toggle ~ .drawer-side > *:not(.drawer-overlay) {
  translate: 100%;
}

[dir="rtl"] .drawer-end > .drawer-toggle ~ .drawer-side > *:not(.drawer-overlay) {
  translate: -100%;
}

.drawer-end > .drawer-toggle:checked ~ .drawer-side > *:not(.drawer-overlay) {
  translate: 0%;
}

.drawer-open > .drawer-side {
  overflow-y: auto;
}

.drawer-open > .drawer-toggle {
  display: none;
}

.drawer-open > .drawer-toggle ~ .drawer-side {
  pointer-events: auto;
  visibility: visible;
  position: sticky;
  display: block;
  width: auto;
  overscroll-behavior: auto;
  opacity: 100%;
}

.drawer-open > .drawer-toggle ~ .drawer-side > .drawer-overlay {
  cursor: default;
  background-color: transparent;
}

.drawer-open > .drawer-toggle ~ .drawer-side > *:not(.drawer-overlay) {
  translate: 0%;
}

[dir="rtl"] .drawer-open > .drawer-toggle ~ .drawer-side > *:not(.drawer-overlay) {
  translate: 0%;
}

.drawer-open > .drawer-toggle:checked ~ .drawer-side {
  pointer-events: auto;
  visibility: visible;
}

.badge {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: calc(0.25rem * 2);
  border-radius: var(--radius-selector);
  vertical-align: middle;
  color: var(--badge-fg);
  border: var(--border) solid var(--badge-color, var(--color-base-200));
  font-size: 0.875rem;
  width: -moz-fit-content;
  width: fit-content;
  padding-inline: calc(0.25rem * 3 - var(--border));
  background-size: auto, calc(var(--noise) * 100%);
  background-image: none, var(--fx-noise);
  background-color: var(--badge-bg);
  --badge-bg: var(--badge-color, var(--color-base-100));
  --badge-fg: var(--color-base-content);
  --size: calc(var(--size-selector, 0.25rem) * 6);
  height: var(--size);
}

.badge-outline {
  color: var(--badge-color);
  --badge-bg: #0000;
  background-image: none;
  border-color: currentColor;
}

.badge-primary {
  --badge-color: var(--color-primary);
  --badge-fg: var(--color-primary-content);
}

.badge-secondary {
  --badge-color: var(--color-secondary);
  --badge-fg: var(--color-secondary-content);
}

.badge-accent {
  --badge-color: var(--color-accent);
  --badge-fg: var(--color-accent-content);
}

.badge-neutral {
  --badge-color: var(--color-neutral);
  --badge-fg: var(--color-neutral-content);
}

.badge-info {
  --badge-color: var(--color-info);
  --badge-fg: var(--color-info-content);
}

.badge-success {
  --badge-color: var(--color-success);
  --badge-fg: var(--color-success-content);
}

.badge-warning {
  --badge-color: var(--color-warning);
  --badge-fg: var(--color-warning-content);
}

.badge-error {
  --badge-color: var(--color-error);
  --badge-fg: var(--color-error-content);
}

.badge-ghost {
  border-color: var(--color-base-200);
  background-color: var(--color-base-200);
  color: var(--color-base-content);
  background-image: none;
}

.badge-sm {
  --size: calc(var(--size-selector, 0.25rem) * 5);
  font-size: 0.75rem;
  padding-inline: calc(0.25rem * 2.5 - var(--border));
}

.collapse:not(td, tr, colgroup) {
  visibility: visible;
}

.collapse {
  position: relative;
  display: grid;
  overflow: hidden;
  border-radius: var(--radius-box, 1rem);
  width: 100%;
  grid-template-rows: max-content 0fr;
  isolation: isolate;
}

@media (prefers-reduced-motion: no-preference) {
  .collapse {
    transition: grid-template-rows 0.2s;
  }
}

.collapse > input:is([type="checkbox"], [type="radio"]) {
  grid-column-start: 1;
  grid-row-start: 1;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  opacity: 0;
  z-index: 1;
  width: 100%;
  padding: 1rem;
  padding-inline-end: 3rem;
  min-height: 1lh;
  transition: background-color 0.2s ease-out;
}

.collapse:is([open], :focus:not(.collapse-close)), .collapse:not(.collapse-close):has(> input:is([type="checkbox"], [type="radio"]):checked) {
  grid-template-rows: max-content 1fr;
}

.collapse:is([open], :focus:not(.collapse-close)) > .collapse-content, .collapse:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content) {
  visibility: visible;
  min-height: -moz-fit-content;
  min-height: fit-content;
}

.collapse:focus-visible, .collapse:has(> input:is([type="checkbox"], [type="radio"]):focus-visible) {
  outline-color: var(--color-base-content);
  outline-style: solid;
  outline-width: 2px;
  outline-offset: 2px;
}

.collapse:not(.collapse-close) > input[type="checkbox"], .collapse:not(.collapse-close) > input[type="radio"]:not(:checked), .collapse:not(.collapse-close) > .collapse-title {
  cursor: pointer;
}

.collapse:focus:not(.collapse-close, .collapse[open]) > .collapse-title {
  cursor: unset;
}

.collapse:is([open], :focus:not(.collapse-close)) > :where(.collapse-content), .collapse:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content) {
  padding-bottom: 1rem;
}

@media (prefers-reduced-motion: no-preference) {
  .collapse:is([open], :focus:not(.collapse-close)) > :where(.collapse-content), .collapse:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content) {
    transition: padding 0.2s ease-out, background-color 0.2s ease-out;
  }

  .collapse:is([open]).collapse-arrow > .collapse-title:after {
    transform: translateY(-50%) rotate(225deg);
  }

  .collapse.collapse-open.collapse-arrow > .collapse-title:after {
    transform: translateY(-50%) rotate(225deg);
  }
}

.collapse.collapse-open.collapse-plus > .collapse-title:after {
  content: "−";
}

.collapse.collapse-arrow:focus:not(.collapse-close) > .collapse-title:after {
  transform: translateY(-50%) rotate(225deg);
}

.collapse.collapse-arrow:not(.collapse-close) > input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-title:after {
  transform: translateY(-50%) rotate(225deg);
}

.collapse[open].collapse-plus > .collapse-title:after {
  content: "−";
}

.collapse.collapse-plus:focus:not(.collapse-close) > .collapse-title:after {
  content: "−";
}

.collapse.collapse-plus:not(.collapse-close) > input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-title:after {
  content: "−";
}

.collapse-title, .collapse-content {
  grid-column-start: 1;
  grid-row-start: 1;
}

.collapse-content {
  visibility: hidden;
  grid-column-start: 1;
  grid-row-start: 2;
  min-height: 0;
  padding-left: 1rem;
  padding-right: 1rem;
  cursor: unset;
}

@media (prefers-reduced-motion: no-preference) {
  .collapse-content {
    transition: visibility 0.2s, padding 0.2s ease-out, background-color 0.2s ease-out;
  }
}

.collapse:is(details) {
  width: 100%;
}

.collapse:is(details) summary {
  position: relative;
  display: block;
}

.collapse:is(details) summary::-webkit-details-marker {
  display: none;
}

.collapse:is(details) summary {
  outline: none;
}

.collapse-arrow > .collapse-title:after {
  position: absolute;
  display: block;
  height: 0.5rem;
  width: 0.5rem;
  transform: translateY(-100%) rotate(45deg);
}

@media (prefers-reduced-motion: no-preference) {
  .collapse-arrow > .collapse-title:after {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 0.2s;
  }
}

.collapse-arrow > .collapse-title:after {
  top: 1.9rem;
  inset-inline-end: 1.4rem;
  content: "";
  transform-origin: 75% 75%;
  box-shadow: 2px 2px;
  pointer-events: none;
}

.collapse-plus > .collapse-title:after {
  position: absolute;
  display: block;
  height: 0.5rem;
  width: 0.5rem;
}

@media (prefers-reduced-motion: no-preference) {
  .collapse-plus > .collapse-title:after {
    transition-property: all;
    transition-duration: 300ms;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  }
}

.collapse-plus > .collapse-title:after {
  top: 0.9rem;
  inset-inline-end: 1.4rem;
  content: "+";
  pointer-events: none;
}

.collapse-title {
  position: relative;
  width: 100%;
  padding: 1rem;
  padding-inline-end: 3rem;
  min-height: 1lh;
  transition: background-color 0.2s ease-out;
}

.collapse-open > .collapse-content {
  visibility: visible;
  min-height: -moz-fit-content;
  min-height: fit-content;
  padding-bottom: 1rem;
}

@media (prefers-reduced-motion: no-preference) {
  .collapse-open > .collapse-content {
    transition: padding 0.2s ease-out, background-color 0.2s ease-out;
  }
}

.textarea {
  border: var(--border) solid #0000;
  min-height: calc(0.25rem * 20);
  flex-shrink: 1;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  border-radius: var(--radius-field);
  background-color: var(--color-base-100);
  padding-block: calc(0.25rem * 2);
  vertical-align: middle;
  width: clamp(3rem, 20rem, 100%);
  padding-inline-start: 0.75rem;
  padding-inline-end: 0.75rem;
  font-size: 0.875rem;
  touch-action: manipulation;
  border-color: var(--input-color);
  box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
}

.textarea textarea {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  background-color: transparent;
  border: none;
}

.textarea textarea:focus, .textarea textarea:focus-within {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .textarea textarea:focus, .textarea textarea:focus-within {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }
}

.textarea:focus, .textarea:focus-within {
  --input-color: var(--color-base-content);
  box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
  outline: 2px solid var(--input-color);
  outline-offset: 2px;
  isolation: isolate;
}

.textarea:has(> textarea[disabled]), .textarea:is(:disabled, [disabled]) {
  cursor: not-allowed;
  border-color: var(--color-base-200);
  background-color: var(--color-base-200);
  color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
}

.textarea:has(> textarea[disabled])::-moz-placeholder, .textarea:is(:disabled, [disabled])::-moz-placeholder {
  color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
}

.textarea:has(> textarea[disabled])::placeholder, .textarea:is(:disabled, [disabled])::placeholder {
  color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
}

.textarea:has(> textarea[disabled]), .textarea:is(:disabled, [disabled]) {
  box-shadow: none;
}

.textarea:has(> textarea[disabled]) > textarea[disabled] {
  cursor: not-allowed;
}

.checkbox {
  border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
  position: relative;
  display: inline-block;
  flex-shrink: 0;
  cursor: pointer;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  border-radius: var(--radius-selector);
  padding: calc(0.25rem * 1);
  vertical-align: middle;
  color: var(--color-base-content);
  box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
  transition: background-color 0.2s, box-shadow 0.2s;
  --size: calc(var(--size-selector, 0.25rem) * 6);
  width: var(--size);
  height: var(--size);
  background-size: auto, calc(var(--noise) * 100%);
  background-image: none, var(--fx-noise);
}

.checkbox:before {
  --tw-content: "";
  content: var(--tw-content);
  display: block;
  width: 100%;
  height: 100%;
  rotate: 45deg;
  background-color: currentColor;
  opacity: 0%;
  transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
  transition-delay: 0.1s;
  clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
  box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  font-size: 1rem;
  line-height: 0.75;
}

.checkbox:focus-visible {
  outline: 2px solid var(--input-color, currentColor);
  outline-offset: 2px;
}

.checkbox:checked, .checkbox[aria-checked="true"] {
  background-color: var(--input-color, #0000);
  box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
}

.checkbox:checked:before, .checkbox[aria-checked="true"]:before {
  clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
  opacity: 100%;
}

@media (forced-colors: active) {
  .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
    rotate: 0deg;
    background-color: transparent;
    --tw-content: "✔︎";
    clip-path: none;
  }
}

@media print {
  .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
    rotate: 0deg;
    background-color: transparent;
    --tw-content: "✔︎";
    clip-path: none;
  }
}

.checkbox:indeterminate {
  background-color: var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
}

.checkbox:indeterminate:before {
  rotate: 0deg;
  opacity: 100%;
  translate: 0 -35%;
  clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
}

.checkbox:disabled {
  cursor: not-allowed;
  opacity: 20%;
}

.range {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  webkit-appearance: none;
  --range-thumb: var(--color-base-100);
  --range-thumb-size: calc(var(--size-selector, 0.25rem) * 6);
  --range-progress: currentColor;
  --range-fill: 1;
  --range-p: 0.25rem;
  --range-bg: color-mix(in oklab, currentColor 10%, #0000);
  cursor: pointer;
  overflow: hidden;
  background-color: transparent;
  vertical-align: middle;
  width: clamp(3rem, 20rem, 100%);
  --radius-selector-max: calc(
    var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
  );
  border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
  border: none;
  height: var(--range-thumb-size);
}

[dir="rtl"] .range {
  --range-dir: -1;
}

.range:focus {
  outline: none;
}

.range:focus-visible {
  outline: 2px solid;
  outline-offset: 2px;
}

.range::-webkit-slider-runnable-track {
  width: 100%;
  background-color: var(--range-bg);
  border-radius: var(--radius-selector);
  height: calc(var(--range-thumb-size) * 0.5);
}

@media (forced-colors: active) {
  .range::-webkit-slider-runnable-track {
    border: 1px solid;
  }

  .range::-moz-range-track {
    border: 1px solid;
  }
}

.range::-webkit-slider-thumb {
  position: relative;
  box-sizing: border-box;
  border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
  background-color: currentColor;
  height: var(--range-thumb-size);
  width: var(--range-thumb-size);
  border: var(--range-p) solid;
  -webkit-appearance: none;
          appearance: none;
  webkit-appearance: none;
  top: 50%;
  color: var(--range-progress);
  transform: translateY(-50%);
  box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
}

.range::-moz-range-track {
  width: 100%;
  background-color: var(--range-bg);
  border-radius: var(--radius-selector);
  height: calc(var(--range-thumb-size) * 0.5);
}

.range::-moz-range-thumb {
  position: relative;
  box-sizing: border-box;
  border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
  background-color: currentColor;
  height: var(--range-thumb-size);
  width: var(--range-thumb-size);
  border: var(--range-p) solid;
  top: 50%;
  color: var(--range-progress);
  box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
}

.range:disabled {
  cursor: not-allowed;
  opacity: 30%;
}

.filter {
  display: flex;
  flex-wrap: wrap;
}

.filter input[type="radio"] {
  width: auto;
}

.filter input {
  overflow: hidden;
  opacity: 100%;
  scale: 1;
  transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s;
}

.filter input:not(:last-child) {
  margin-inline-end: calc(0.25rem * 1);
}

.filter input.filter-reset {
  aspect-ratio: 1 / 1;
}

.filter input.filter-reset::after {
  content: "×";
}

.filter:not(:has(input:checked:not(.filter-reset))) .filter-reset, .filter:not(:has(input:checked:not(.filter-reset))) input[type="reset"] {
  scale: 0;
  border-width: 0;
  margin-inline: calc(0.25rem * 0);
  width: calc(0.25rem * 0);
  padding-inline: calc(0.25rem * 0);
  opacity: 0%;
}

.filter:has(input:checked:not(.filter-reset)) input:not(:checked, .filter-reset, input[type="reset"]) {
  scale: 0;
  border-width: 0;
  margin-inline: calc(0.25rem * 0);
  width: calc(0.25rem * 0);
  padding-inline: calc(0.25rem * 0);
  opacity: 0%;
}

.label {
  display: inline-flex;
  align-items: center;
  gap: calc(0.25rem * 1.5);
  white-space: nowrap;
  color: color-mix(in oklab, currentColor 60%, transparent);
}

.label:has(input) {
  cursor: pointer;
}

.label:is(.input > *, .select > *) {
  display: flex;
  height: calc(100% - 0.5rem);
  align-items: center;
  padding-inline: calc(0.25rem * 3);
  white-space: nowrap;
  font-size: inherit;
}

.label:is(.\!input > *, .select > *) {
  display: flex !important;
  height: calc(100% - 0.5rem) !important;
  align-items: center !important;
  padding-inline: calc(0.25rem * 3) !important;
  white-space: nowrap !important;
  font-size: inherit !important;
}

.label:is(.input > *, .select > *):first-child {
  margin-inline-start: calc(0.25rem * -3);
  margin-inline-end: calc(0.25rem * 3);
  border-inline-end: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
}

.label:is(.\!input > *, .select > *):first-child {
  margin-inline-start: calc(0.25rem * -3) !important;
  margin-inline-end: calc(0.25rem * 3) !important;
  border-inline-end: var(--border) solid color-mix(in oklab, currentColor 10%, #0000) !important;
}

.label:is(.input > *, .select > *):last-child {
  margin-inline-start: calc(0.25rem * 3);
  margin-inline-end: calc(0.25rem * -3);
  border-inline-start: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
}

.label:is(.\!input > *, .select > *):last-child {
  margin-inline-start: calc(0.25rem * 3) !important;
  margin-inline-end: calc(0.25rem * -3) !important;
  border-inline-start: var(--border) solid color-mix(in oklab, currentColor 10%, #0000) !important;
}

.floating-label:has(.input-sm, .select-sm, .textarea-sm) span {
  font-size: 0.75rem;
  top: calc(var(--size-field, 0.25rem) * 8 / 2);
}

.list {
  display: flex;
  flex-direction: column;
  font-size: 0.875rem;
}

.list :where(.list-row) {
  --list-grid-cols: minmax(0, auto) 1fr;
  position: relative;
  display: grid;
  grid-auto-flow: column;
  gap: calc(0.25rem * 4);
  border-radius: var(--radius-box);
  padding: calc(0.25rem * 4);
  word-break: break-word;
  grid-template-columns: var(--list-grid-cols);
}

.list :where(.list-row):has(.list-col-grow:nth-child(1)) {
  --list-grid-cols: 1fr;
}

.list :where(.list-row):has(.list-col-grow:nth-child(2)) {
  --list-grid-cols: minmax(0, auto) 1fr;
}

.list :where(.list-row):has(.list-col-grow:nth-child(3)) {
  --list-grid-cols: minmax(0, auto) minmax(0, auto) 1fr;
}

.list :where(.list-row):has(.list-col-grow:nth-child(4)) {
  --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
}

.list :where(.list-row):has(.list-col-grow:nth-child(5)) {
  --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
}

.list :where(.list-row):has(.list-col-grow:nth-child(6)) {
  --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto)
        minmax(0, auto) 1fr;
}

.list :where(.list-row) :not(.list-col-wrap) {
  grid-row-start: 1;
}

.list > :not(:last-child).list-row:after, .list > :not(:last-child) .list-row:after {
  content: "";
  border-bottom: var(--border) solid;
  inset-inline: var(--radius-box);
  position: absolute;
  bottom: calc(0.25rem * 0);
  border-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
}

.breadcrumbs {
  max-width: 100%;
  overflow-x: auto;
  padding-block: calc(0.25rem * 2);
}

.breadcrumbs > menu, .breadcrumbs > ul, .breadcrumbs > ol {
  display: flex;
  min-height: -moz-min-content;
  min-height: min-content;
  align-items: center;
  white-space: nowrap;
}

.breadcrumbs > menu > li, .breadcrumbs > ul > li, .breadcrumbs > ol > li {
  display: flex;
  align-items: center;
}

.breadcrumbs > menu > li > *, .breadcrumbs > ul > li > *, .breadcrumbs > ol > li > * {
  display: flex;
  cursor: pointer;
  align-items: center;
  gap: calc(0.25rem * 2);
}

@media (hover: hover) {
  .breadcrumbs > menu > li > *:hover, .breadcrumbs > ul > li > *:hover, .breadcrumbs > ol > li > *:hover {
    text-decoration-line: underline;
  }
}

.breadcrumbs > menu > li > *:focus, .breadcrumbs > ul > li > *:focus, .breadcrumbs > ol > li > *:focus {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .breadcrumbs > menu > li > *:focus, .breadcrumbs > ul > li > *:focus, .breadcrumbs > ol > li > *:focus {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }
}

.breadcrumbs > menu > li > *:focus-visible, .breadcrumbs > ul > li > *:focus-visible, .breadcrumbs > ol > li > *:focus-visible {
  outline: 2px solid currentColor;
  outline-offset: 2px;
}

.breadcrumbs > menu > li + *:before, .breadcrumbs > ul > li + *:before, .breadcrumbs > ol > li + *:before {
  content: "";
  margin-right: calc(0.25rem * 3);
  margin-left: calc(0.25rem * 2);
  display: block;
  height: calc(0.25rem * 1.5);
  width: calc(0.25rem * 1.5);
  opacity: 40%;
  rotate: 45deg;
  border-top: 1px solid;
  border-right: 1px solid;
  background-color: #0000;
}

[dir="rtl"] .breadcrumbs > menu > li + *:before, [dir="rtl"] .breadcrumbs > ul > li + *:before, [dir="rtl"] .breadcrumbs > ol > li + *:before {
  rotate: -135deg;
}

.card {
  position: relative;
  display: flex;
  flex-direction: column;
  border-radius: var(--radius-box);
  outline-width: 2px;
  transition: outline 0.2s ease-in-out;
  outline: 0 solid #0000;
  outline-offset: 2px;
}

.card:focus {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .card:focus {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }
}

.card:focus-visible {
  outline-color: currentColor;
}

.card :where(figure:first-child) {
  overflow: hidden;
  border-start-start-radius: inherit;
  border-start-end-radius: inherit;
  border-end-start-radius: unset;
  border-end-end-radius: unset;
}

.card :where(figure:last-child) {
  overflow: hidden;
  border-start-start-radius: unset;
  border-start-end-radius: unset;
  border-end-start-radius: inherit;
  border-end-end-radius: inherit;
}

.card:where(.card-border) {
  border: var(--border) solid var(--color-base-200);
}

.card:where(.card-dash) {
  border: var(--border) dashed var(--color-base-200);
}

.card.image-full {
  display: grid;
}

.card.image-full > * {
  grid-column-start: 1;
  grid-row-start: 1;
}

.card.image-full > .card-body {
  position: relative;
  color: var(--color-neutral-content);
}

.card.image-full :where(figure) {
  overflow: hidden;
  border-radius: inherit;
}

.card.image-full > figure img {
  height: 100%;
  -o-object-fit: cover;
     object-fit: cover;
  filter: brightness(28%);
}

.card figure {
  display: flex;
  align-items: center;
  justify-content: center;
}

.card:has(> input:is(input[type="checkbox"], input[type="radio"])) {
  cursor: pointer;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
}

.card:has(> :checked) {
  outline: 2px solid currentColor;
}

.card-title {
  display: flex;
  align-items: center;
  gap: calc(0.25rem * 2);
  font-size: var(--cardtitle-fs, 1.125rem);
  font-weight: 600;
}

.card-body {
  display: flex;
  flex: auto;
  flex-direction: column;
  gap: calc(0.25rem * 2);
  padding: var(--card-p, 1.5rem);
  font-size: var(--card-fs, 0.875rem);
}

.card-body :where(p) {
  flex-grow: 1;
}

.card-actions {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  gap: calc(0.25rem * 2);
}

.card-xs .card-body {
  --card-p: 0.5rem;
  --card-fs: 0.6875rem;
}

.card-xs .card-title {
  --cardtitle-fs: 0.875rem;
}

.card-sm .card-body {
  --card-p: 1rem;
  --card-fs: 0.75rem;
}

.card-sm .card-title {
  --cardtitle-fs: 1rem;
}

.card-md .card-body {
  --card-p: 1.5rem;
  --card-fs: 0.875rem;
}

.card-md .card-title {
  --cardtitle-fs: 1.125rem;
}

.card-lg .card-body {
  --card-p: 2rem;
  --card-fs: 1rem;
}

.card-lg .card-title {
  --cardtitle-fs: 1.25rem;
}

.card-xl .card-body {
  --card-p: 2.5rem;
  --card-fs: 1.125rem;
}

.card-xl .card-title {
  --cardtitle-fs: 1.375rem;
}

.divider {
  display: flex;
  height: calc(0.25rem * 4);
  flex-direction: row;
  align-items: center;
  align-self: stretch;
  white-space: nowrap;
  margin: var(--divider-m, 1rem 0);
  --divider-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
}

.divider:before, .divider:after {
  content: "";
  height: calc(0.25rem * 0.5);
  width: 100%;
  flex-grow: 1;
  background-color: var(--divider-color);
}

@media print {
  .divider:before, .divider:after {
    border: 0.5px solid;
  }
}

.divider:not(:empty) {
  gap: calc(0.25rem * 4);
}

.divider-horizontal.divider {
  height: auto;
  width: calc(0.25rem * 4);
  flex-direction: column;
}

.divider-horizontal.divider:before {
  height: 100%;
  width: calc(0.25rem * 0.5);
}

.divider-horizontal.divider:after {
  height: 100%;
  width: calc(0.25rem * 0.5);
}

.divider-vertical.divider {
  height: calc(0.25rem * 4);
  width: auto;
  flex-direction: row;
}

.divider-vertical.divider:before {
  height: calc(0.25rem * 0.5);
  width: 100%;
}

.divider-vertical.divider:after {
  height: calc(0.25rem * 0.5);
  width: 100%;
}

.menu {
  display: flex;
  width: -moz-fit-content;
  width: fit-content;
  flex-direction: column;
  flex-wrap: wrap;
  padding: calc(0.25rem * 2);
  --menu-active-fg: var(--color-neutral-content);
  --menu-active-bg: var(--color-neutral);
  font-size: 0.875rem;
}

.menu :where(li ul) {
  position: relative;
  margin-inline-start: calc(0.25rem * 4);
  padding-inline-start: calc(0.25rem * 2);
  white-space: nowrap;
}

.menu :where(li ul):before {
  position: absolute;
  inset-inline-start: calc(0.25rem * 0);
  top: calc(0.25rem * 3);
  bottom: calc(0.25rem * 3);
  background-color: var(--color-base-content);
  opacity: 10%;
  width: var(--border);
  content: "";
}

.menu :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
  display: none;
}

.menu :where(li:not(.menu-title) > *:not(ul, details, .menu-title, .btn)), .menu :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
  display: grid;
  grid-auto-flow: column;
  align-content: flex-start;
  align-items: center;
  gap: calc(0.25rem * 2);
  border-radius: var(--radius-field);
  padding-inline: calc(0.25rem * 3);
  padding-block: calc(0.25rem * 1.5);
  text-align: start;
  transition-property: color, background-color, box-shadow;
  transition-duration: 0.2s;
  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
  grid-auto-columns: minmax(auto, max-content) auto max-content;
  text-wrap: balance;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
}

.menu :where(li > details > summary) {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .menu :where(li > details > summary) {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }
}

.menu :where(li > details > summary)::-webkit-details-marker {
  display: none;
}

.menu :where(li > details > summary):after, .menu :where(li > .menu-dropdown-toggle):after {
  justify-self: flex-end;
  display: block;
  height: 0.375rem;
  width: 0.375rem;
  rotate: -135deg;
  translate: 0 -1px;
  transition-property: rotate, translate;
  transition-duration: 0.2s;
  content: "";
  transform-origin: 50% 50%;
  box-shadow: 2px 2px inset;
  pointer-events: none;
}

.menu :where(li > details[open] > summary):after, .menu :where(li > .menu-dropdown-toggle.menu-dropdown-show):after {
  rotate: 45deg;
  translate: 0 1px;
}

.menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn).menu-focus, .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn):focus-visible {
  cursor: pointer;
  background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
  color: var(--color-base-content);
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn).menu-focus, .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn):focus-visible {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }
}

.menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
  cursor: pointer;
  background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }
}

.menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
  box-shadow: 0 1px oklch(0% 0 0 / 0.01) inset, 0 -1px oklch(100% 0 0 / 0.01) inset;
}

.menu :where(li:empty) {
  background-color: var(--color-base-content);
  opacity: 10%;
  margin: 0.5rem 1rem;
  height: 1px;
}

.menu :where(li) {
  position: relative;
  display: flex;
  flex-shrink: 0;
  flex-direction: column;
  flex-wrap: wrap;
  align-items: stretch;
}

.menu :where(li) .badge {
  justify-self: flex-end;
}

.menu :where(li) > *:not(ul, .menu-title, details, .btn):active, .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .menu :where(li) > *:not(ul, .menu-title, details, .btn):active, .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }
}

.menu :where(li) > *:not(ul, .menu-title, details, .btn):active, .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active {
  color: var(--menu-active-fg);
  background-color: var(--menu-active-bg);
  background-size: auto, calc(var(--noise) * 100%);
  background-image: none, var(--fx-noise);
}

.menu :where(li) > *:not(ul, .menu-title, details, .btn):active:not(.menu :where(li) > *:not(ul, .menu-title, details, .btn):active:active), .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active:not(.menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active:active), .menu :where(li) > details > summary:active:not(.menu :where(li) > details > summary:active:active) {
  box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--menu-active-bg);
}

.menu :where(li).menu-disabled {
  pointer-events: none;
  color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
}

.menu .dropdown:focus-within .menu-dropdown-toggle:after {
  rotate: 45deg;
  translate: 0 1px;
}

.menu .\!dropdown:focus-within .menu-dropdown-toggle:after {
  rotate: 45deg !important;
  translate: 0 1px !important;
}

.menu .dropdown-content {
  margin-top: calc(0.25rem * 2);
  padding: calc(0.25rem * 2);
}

.menu .dropdown-content:before {
  display: none;
}

.menu-horizontal {
  display: inline-flex;
  flex-direction: row;
}

.menu-horizontal > li:not(.menu-title) > details > ul {
  position: absolute;
  margin-inline-start: calc(0.25rem * 0);
  margin-top: calc(0.25rem * 4);
  padding-block: calc(0.25rem * 2);
  padding-inline-end: calc(0.25rem * 2);
}

.menu-horizontal > li > details > ul:before {
  content: none;
}

:where(.menu-horizontal > li:not(.menu-title) > details > ul) {
  border-radius: var(--radius-box);
  background-color: var(--color-base-100);
  box-shadow: 0 1px 3px 0 oklch(0% 0 0/0.1), 0 1px 2px -1px oklch(0% 0 0/0.1);
}

.menu-sm :where(li:not(.menu-title) > *:not(ul, details, .menu-title)), .menu-sm :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
  border-radius: var(--radius-field);
  padding-inline: calc(0.25rem * 2.5);
  padding-block: calc(0.25rem * 1);
  font-size: 0.75rem;
}

.menu-sm .menu-title {
  padding-inline: calc(0.25rem * 3);
  padding-block: calc(0.25rem * 2);
}

.menu-md :where(li:not(.menu-title) > *:not(ul, details, .menu-title)), .menu-md :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
  border-radius: var(--radius-field);
  padding-inline: calc(0.25rem * 3);
  padding-block: calc(0.25rem * 1.5);
  font-size: 0.875rem;
}

.menu-md .menu-title {
  padding-inline: calc(0.25rem * 3);
  padding-block: calc(0.25rem * 2);
}

.menu-lg :where(li:not(.menu-title) > *:not(ul, details, .menu-title)), .menu-lg :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
  border-radius: var(--radius-field);
  padding-inline: calc(0.25rem * 4);
  padding-block: calc(0.25rem * 1.5);
  font-size: 1.125rem;
}

.menu-lg .menu-title {
  padding-inline: calc(0.25rem * 6);
  padding-block: calc(0.25rem * 3);
}

.\!input {
  cursor: text !important;
  border: var(--border) solid #0000 !important;
  position: relative !important;
  display: inline-flex !important;
  flex-shrink: 1 !important;
  -webkit-appearance: none !important;
     -moz-appearance: none !important;
          appearance: none !important;
  align-items: center !important;
  gap: calc(0.25rem * 2) !important;
  background-color: var(--color-base-100) !important;
  padding-inline: calc(0.25rem * 3) !important;
  vertical-align: middle !important;
  white-space: nowrap !important;
  width: clamp(3rem, 20rem, 100%) !important;
  height: var(--size) !important;
  font-size: 0.875rem !important;
  touch-action: manipulation !important;
  border-start-start-radius: var(--join-ss, var(--radius-field)) !important;
  border-start-end-radius: var(--join-se, var(--radius-field)) !important;
  border-end-start-radius: var(--join-es, var(--radius-field)) !important;
  border-end-end-radius: var(--join-ee, var(--radius-field)) !important;
  border-color: var(--input-color) !important;
  box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset !important;
  --size: calc(var(--size-field, 0.25rem) * 10) !important;
  --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000) !important;
}

.input {
  cursor: text;
  border: var(--border) solid #0000;
  position: relative;
  display: inline-flex;
  flex-shrink: 1;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  align-items: center;
  gap: calc(0.25rem * 2);
  background-color: var(--color-base-100);
  padding-inline: calc(0.25rem * 3);
  vertical-align: middle;
  white-space: nowrap;
  width: clamp(3rem, 20rem, 100%);
  height: var(--size);
  font-size: 0.875rem;
  touch-action: manipulation;
  border-start-start-radius: var(--join-ss, var(--radius-field));
  border-start-end-radius: var(--join-se, var(--radius-field));
  border-end-start-radius: var(--join-es, var(--radius-field));
  border-end-end-radius: var(--join-ee, var(--radius-field));
  border-color: var(--input-color);
  box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  --size: calc(var(--size-field, 0.25rem) * 10);
  --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
}

.\!input:where(input) {
  display: inline-flex !important;
}

.input:where(input) {
  display: inline-flex;
}

.\!input :where(input) {
  display: inline-flex !important;
  height: 100% !important;
  width: 100% !important;
  -webkit-appearance: none !important;
     -moz-appearance: none !important;
          appearance: none !important;
  background-color: transparent !important;
  border: none !important;
}

.input :where(input) {
  display: inline-flex;
  height: 100%;
  width: 100%;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  background-color: transparent;
  border: none;
}

.\!input :where(input):focus, .\!input :where(input):focus-within {
  --tw-outline-style: none !important;
  outline-style: none !important;
}

.input :where(input):focus, .input :where(input):focus-within {
  --tw-outline-style: none;
  outline-style: none;
}

.\!input :where(input):focus, .\!input :where(input):focus-within {
  --tw-outline-style: none !important;
  outline-style: none !important;
}

@media (forced-colors: active) {
  .\!input :where(input):focus, .\!input :where(input):focus-within {
    outline: 2px solid transparent !important;
    outline-offset: 2px !important;
  }

  .input :where(input):focus, .input :where(input):focus-within {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }

  .\!input :where(input):focus, .\!input :where(input):focus-within {
    outline: 2px solid transparent !important;
    outline-offset: 2px !important;
  }
}

.\!input :where(input[type="url"]), .\!input :where(input[type="email"]) {
  direction: ltr !important;
}

.input :where(input[type="url"]), .input :where(input[type="email"]) {
  direction: ltr;
}

.\!input :where(input[type="url"]), .\!input :where(input[type="email"]) {
  direction: ltr !important;
}

.\!input :where(input[type="date"]) {
  display: inline-flex !important;
}

.input :where(input[type="date"]) {
  display: inline-flex;
}

.\!input:focus, .\!input:focus-within {
  --input-color: var(--color-base-content) !important;
  box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) !important;
  outline: 2px solid var(--input-color) !important;
  outline-offset: 2px !important;
  isolation: isolate !important;
  z-index: 1 !important;
}

.input:focus, .input:focus-within {
  --input-color: var(--color-base-content);
  box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
  outline: 2px solid var(--input-color);
  outline-offset: 2px;
  isolation: isolate;
  z-index: 1;
}

.\!input:focus, .\!input:focus-within {
  --input-color: var(--color-base-content) !important;
  box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) !important;
  outline: 2px solid var(--input-color) !important;
  outline-offset: 2px !important;
  isolation: isolate !important;
  z-index: 1 !important;
}

.\!input:has(> input[disabled]), .\!input:is(:disabled, [disabled]), fieldset:disabled .\!input {
  cursor: not-allowed !important;
  border-color: var(--color-base-200) !important;
  background-color: var(--color-base-200) !important;
  color: color-mix(in oklab, var(--color-base-content) 40%, transparent) !important;
}

.input:has(> input[disabled]), .input:is(:disabled, [disabled]), fieldset:disabled .input {
  cursor: not-allowed;
  border-color: var(--color-base-200);
  background-color: var(--color-base-200);
  color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
}

.\!input:has(> input[disabled]), .\!input:is(:disabled, [disabled]), fieldset:disabled .\!input {
  cursor: not-allowed !important;
  border-color: var(--color-base-200) !important;
  background-color: var(--color-base-200) !important;
  color: color-mix(in oklab, var(--color-base-content) 40%, transparent) !important;
}

.\!input:has(> input[disabled])::-moz-placeholder, .\!input:is(:disabled, [disabled])::-moz-placeholder, fieldset:disabled .\!input::-moz-placeholder {
  color: color-mix(in oklab, var(--color-base-content) 20%, transparent) !important;
}

.\!input:has(> input[disabled])::placeholder, .\!input:is(:disabled, [disabled])::placeholder, fieldset:disabled .\!input::placeholder {
  color: color-mix(in oklab, var(--color-base-content) 20%, transparent) !important;
}

.input:has(> input[disabled])::-moz-placeholder, .input:is(:disabled, [disabled])::-moz-placeholder, fieldset:disabled .input::-moz-placeholder {
  color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
}

.input:has(> input[disabled])::placeholder, .input:is(:disabled, [disabled])::placeholder, fieldset:disabled .input::placeholder {
  color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
}

.\!input:has(> input[disabled])::-moz-placeholder, .\!input:is(:disabled, [disabled])::-moz-placeholder, fieldset:disabled .\!input::-moz-placeholder {
  color: color-mix(in oklab, var(--color-base-content) 20%, transparent) !important;
}

.\!input:has(> input[disabled])::placeholder, .\!input:is(:disabled, [disabled])::placeholder, fieldset:disabled .\!input::placeholder {
  color: color-mix(in oklab, var(--color-base-content) 20%, transparent) !important;
}

.\!input:has(> input[disabled]), .\!input:is(:disabled, [disabled]), fieldset:disabled .\!input {
  box-shadow: none !important;
}

.input:has(> input[disabled]), .input:is(:disabled, [disabled]), fieldset:disabled .input {
  box-shadow: none;
}

.\!input:has(> input[disabled]), .\!input:is(:disabled, [disabled]), fieldset:disabled .\!input {
  box-shadow: none !important;
}

.\!input:has(> input[disabled]) > input[disabled] {
  cursor: not-allowed !important;
}

.input:has(> input[disabled]) > input[disabled] {
  cursor: not-allowed;
}

.\!input::-webkit-date-and-time-value {
  text-align: inherit !important;
}

.input::-webkit-date-and-time-value {
  text-align: inherit;
}

.\!input[type="number"]::-webkit-inner-spin-button {
  margin-block: calc(0.25rem * -3) !important;
  margin-inline-end: calc(0.25rem * -3) !important;
}

.input[type="number"]::-webkit-inner-spin-button {
  margin-block: calc(0.25rem * -3);
  margin-inline-end: calc(0.25rem * -3);
}

.\!input::-webkit-calendar-picker-indicator {
  position: absolute !important;
  inset-inline-end: 0.75em !important;
}

.input::-webkit-calendar-picker-indicator {
  position: absolute;
  inset-inline-end: 0.75em;
}

.\!input:has(> input[type="date"]) :where(input[type="date"]) {
  display: inline-flex !important;
  webkit-appearance: none !important;
  -webkit-appearance: none !important;
     -moz-appearance: none !important;
          appearance: none !important;
}

.input:has(> input[type="date"]) :where(input[type="date"]) {
  display: inline-flex;
  webkit-appearance: none;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}

.\!input:has(> input[type="date"]) input[type="date"]::-webkit-calendar-picker-indicator {
  position: absolute !important;
  inset-inline-end: 0.75em !important;
  width: 1em !important;
  height: 1em !important;
  cursor: pointer !important;
}

.input:has(> input[type="date"]) input[type="date"]::-webkit-calendar-picker-indicator {
  position: absolute;
  inset-inline-end: 0.75em;
  width: 1em;
  height: 1em;
  cursor: pointer;
}

.input-sm {
  --size: calc(var(--size-field, 0.25rem) * 8);
  font-size: 0.75rem;
}

.input-sm[type="number"]::-webkit-inner-spin-button {
  margin-block: calc(0.25rem * -2);
  margin-inline-end: calc(0.25rem * -3);
}

.alert {
  display: grid;
  align-items: center;
  gap: calc(0.25rem * 4);
  border-radius: var(--radius-box);
  padding-inline: calc(0.25rem * 4);
  padding-block: calc(0.25rem * 3);
  color: var(--color-base-content);
  background-color: var(--alert-color, var(--color-base-200));
  justify-content: start;
  justify-items: start;
  grid-auto-flow: column;
  grid-template-columns: auto;
  text-align: start;
  border: var(--border) solid var(--color-base-200);
  font-size: 0.875rem;
  line-height: 1.25rem;
  background-size: auto, calc(var(--noise) * 100%);
  background-image: none, var(--fx-noise);
  box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px color-mix( in oklab, color-mix(in oklab, #000 20%, var(--alert-color, var(--color-base-200))) calc(var(--depth) * 20%), #0000 ), 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * 0.08));
}

.alert:has(:nth-child(2)) {
  grid-template-columns: auto minmax(auto, 1fr);
}

.alert.alert-outline {
  background-color: transparent;
  color: var(--alert-color);
  box-shadow: none;
  background-image: none;
}

.alert.alert-dash {
  background-color: transparent;
  color: var(--alert-color);
  border-style: dashed;
  box-shadow: none;
  background-image: none;
}

.alert.alert-soft {
  color: var(--alert-color, var(--color-base-content));
  background: color-mix( in oklab, var(--alert-color, var(--color-base-content)) 8%, var(--color-base-100) );
  border-color: color-mix( in oklab, var(--alert-color, var(--color-base-content)) 10%, var(--color-base-100) );
  box-shadow: none;
  background-image: none;
}

.alert-info {
  border-color: var(--color-info);
  color: var(--color-info-content);
  --alert-color: var(--color-info);
}

.alert-success {
  border-color: var(--color-success);
  color: var(--color-success-content);
  --alert-color: var(--color-success);
}

.alert-warning {
  border-color: var(--color-warning);
  color: var(--color-warning-content);
  --alert-color: var(--color-warning);
}

.alert-error {
  border-color: var(--color-error);
  color: var(--color-error-content);
  --alert-color: var(--color-error);
}

@keyframes rating {
  0%, 40% {
    scale: 1.1;
    filter: brightness(1.05) contrast(1.05);
  }
}

.diff {
  position: relative;
  display: grid;
  width: 100%;
  overflow: hidden;
  webkit-user-select: none;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  grid-template-rows: 1fr 1.8rem 1fr;
  direction: ltr;
  container-type: inline-size;
  grid-template-columns: auto 1fr;
}

.diff:focus-visible, .diff:has(.diff-item-1:focus-visible) {
  outline-style: var(--tw-outline-style);
  outline-width: 2px;
  outline-offset: 1px;
  outline-color: var(--color-base-content);
}

.diff:focus-visible {
  outline-style: var(--tw-outline-style);
  outline-width: 2px;
  outline-offset: 1px;
  outline-color: var(--color-base-content);
}

.diff:focus-visible .diff-resizer {
  min-width: 95cqi;
  max-width: 95cqi;
}

.diff:has(.diff-item-1:focus-visible) {
  outline-style: var(--tw-outline-style);
  outline-width: 2px;
  outline-offset: 1px;
}

.diff:has(.diff-item-1:focus-visible) .diff-resizer {
  min-width: 5cqi;
  max-width: 5cqi;
}

@supports (-webkit-overflow-scrolling: touch) and (overflow: -webkit-paged-x) {
  .diff:focus .diff-resizer {
    min-width: 5cqi;
    max-width: 5cqi;
  }

  .diff:has(.diff-item-1:focus) .diff-resizer {
    min-width: 95cqi;
    max-width: 95cqi;
  }
}

.diff-resizer {
  position: relative;
  z-index: 1;
  grid-column-start: 1;
  grid-row-start: 2;
  height: calc(0.25rem * 4);
  width: 50cqi;
  max-width: calc(100cqi - 1rem);
  min-width: 1rem;
  resize: horizontal;
  overflow: hidden;
  opacity: 0%;
  transform: scaleY(3) translate(0.35rem, 0.35rem);
  cursor: ew-resize;
  transform-origin: 100% 100%;
  clip-path: inset(calc(100% - 0.75rem) 0 0 calc(100% - 0.75rem));
  transition: min-width 0.3s ease-out, max-width 0.3s ease-out;
}

.diff-item-2 {
  position: relative;
  grid-column-start: 1;
  grid-row: span 3 / span 3;
  grid-row-start: 1;
}

.diff-item-2:after {
  pointer-events: none;
  position: absolute;
  top: calc(1/2 * 100%);
  right: 1px;
  bottom: calc(0.25rem * 0);
  z-index: 2;
  border-radius: calc(infinity * 1px);
  background-color: color-mix(in oklab, var(--color-base-100) 50%, transparent);
  width: 1.2rem;
  height: 1.8rem;
  border: 2px solid var(--color-base-100);
  content: "";
  outline: 1px solid color-mix(in oklab, var(--color-base-content) 5%, #0000);
  outline-offset: -3px;
  -webkit-backdrop-filter: blur(8px);
          backdrop-filter: blur(8px);
  box-shadow: 0 1px 2px 0 oklch(0% 0 0 / 0.1);
  translate: 50% -50%;
}

.diff-item-2 > * {
  pointer-events: none;
  position: absolute;
  top: calc(0.25rem * 0);
  bottom: calc(0.25rem * 0);
  left: calc(0.25rem * 0);
  height: 100%;
  width: 100cqi;
  max-width: none;
  -o-object-fit: cover;
     object-fit: cover;
  -o-object-position: center;
     object-position: center;
}

@supports (-webkit-overflow-scrolling: touch) and (overflow: -webkit-paged-x) {
  .diff-item-2:after {
    content: none;
  }
}

.diff-item-1 {
  position: relative;
  z-index: 1;
  grid-column-start: 1;
  grid-row: span 3 / span 3;
  grid-row-start: 1;
  overflow: hidden;
  border-right: 2px solid var(--color-base-100);
}

.diff-item-1:focus-visible {
  --tw-outline-style: none;
  outline-style: none;
}

.diff-item-1 > * {
  pointer-events: none;
  position: absolute;
  top: calc(0.25rem * 0);
  bottom: calc(0.25rem * 0);
  left: calc(0.25rem * 0);
  height: 100%;
  width: 100cqi;
  max-width: none;
  -o-object-fit: cover;
     object-fit: cover;
  -o-object-position: center;
     object-position: center;
}

.steps {
  display: inline-grid;
  grid-auto-flow: column;
  overflow: hidden;
  overflow-x: auto;
  counter-reset: step;
  grid-auto-columns: 1fr;
}

.steps .step {
  display: grid;
  grid-template-columns: repeat(1, minmax(0, 1fr));
  grid-template-columns: auto;
  grid-template-rows: repeat(2, minmax(0, 1fr));
  grid-template-rows: 40px 1fr;
  place-items: center;
  text-align: center;
  min-width: 4rem;
  --step-bg: var(--color-base-300);
  --step-fg: var(--color-base-content);
}

.steps .step:before {
  top: calc(0.25rem * 0);
  grid-column-start: 1;
  grid-row-start: 1;
  height: calc(0.25rem * 2);
  width: 100%;
  border: 1px solid;
  color: var(--step-bg);
  background-color: var(--step-bg);
  --tw-content: "";
  content: var(--tw-content);
  margin-inline-start: -100%;
}

.steps .step > .step-icon, .steps .step:not(:has(.step-icon)):after {
  content: counter(step);
  counter-increment: step;
  z-index: 1;
  color: var(--step-fg);
  background-color: var(--step-bg);
  border: 1px solid var(--step-bg);
  position: relative;
  grid-column-start: 1;
  grid-row-start: 1;
  display: grid;
  height: calc(0.25rem * 8);
  width: calc(0.25rem * 8);
  place-items: center;
  place-self: center;
  border-radius: calc(infinity * 1px);
}

.steps .step:first-child:before {
  content: none;
}

.steps .step[data-content]:after {
  content: attr(data-content);
}

.steps .step-neutral + .step-neutral:before, .steps .step-neutral:after, .steps .step-neutral > .step-icon {
  --step-bg: var(--color-neutral);
  --step-fg: var(--color-neutral-content);
}

.steps .step-primary + .step-primary:before, .steps .step-primary:after, .steps .step-primary > .step-icon {
  --step-bg: var(--color-primary);
  --step-fg: var(--color-primary-content);
}

.steps .step-secondary + .step-secondary:before, .steps .step-secondary:after, .steps .step-secondary > .step-icon {
  --step-bg: var(--color-secondary);
  --step-fg: var(--color-secondary-content);
}

.steps .step-accent + .step-accent:before, .steps .step-accent:after, .steps .step-accent > .step-icon {
  --step-bg: var(--color-accent);
  --step-fg: var(--color-accent-content);
}

.steps .step-info + .step-info:before, .steps .step-info:after, .steps .step-info > .step-icon {
  --step-bg: var(--color-info);
  --step-fg: var(--color-info-content);
}

.steps .step-success + .step-success:before, .steps .step-success:after, .steps .step-success > .step-icon {
  --step-bg: var(--color-success);
  --step-fg: var(--color-success-content);
}

.steps .step-warning + .step-warning:before, .steps .step-warning:after, .steps .step-warning > .step-icon {
  --step-bg: var(--color-warning);
  --step-fg: var(--color-warning-content);
}

.steps .step-error + .step-error:before, .steps .step-error:after, .steps .step-error > .step-icon {
  --step-bg: var(--color-error);
  --step-fg: var(--color-error-content);
}

.avatar-group :where(.avatar) {
  overflow: hidden;
  border-radius: calc(infinity * 1px);
  border: 4px solid var(--color-base-100);
}

.avatar {
  position: relative;
  display: inline-flex;
  vertical-align: middle;
}

.avatar > div {
  display: block;
  aspect-ratio: 1 / 1;
  overflow: hidden;
}

.avatar img {
  height: 100%;
  width: 100%;
  -o-object-fit: cover;
     object-fit: cover;
}

.select {
  border: var(--border) solid #0000;
  position: relative;
  display: inline-flex;
  flex-shrink: 1;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  align-items: center;
  gap: calc(0.25rem * 1.5);
  background-color: var(--color-base-100);
  padding-inline-start: calc(0.25rem * 3);
  padding-inline-end: calc(0.25rem * 7);
  vertical-align: middle;
  width: clamp(3rem, 20rem, 100%);
  height: var(--size);
  font-size: 0.875rem;
  touch-action: manipulation;
  border-start-start-radius: var(--join-ss, var(--radius-field));
  border-start-end-radius: var(--join-se, var(--radius-field));
  border-end-start-radius: var(--join-es, var(--radius-field));
  border-end-end-radius: var(--join-ee, var(--radius-field));
  background-image: linear-gradient(45deg, #0000 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, #0000 50%);
  background-position: calc(100% - 20px) calc(1px + 50%), calc(100% - 16.1px) calc(1px + 50%);
  background-size: 4px 4px, 4px 4px;
  background-repeat: no-repeat;
  text-overflow: ellipsis;
  box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  border-color: var(--input-color);
  --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
  --size: calc(var(--size-field, 0.25rem) * 10);
}

[dir="rtl"] .select {
  background-position: calc(0% + 12px) calc(1px + 50%), calc(0% + 16px) calc(1px + 50%);
}

.select select {
  margin-inline-start: calc(0.25rem * -3);
  margin-inline-end: calc(0.25rem * -7);
  width: calc(100% + 2.75rem);
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  padding-inline-start: calc(0.25rem * 3);
  padding-inline-end: calc(0.25rem * 7);
  height: calc(100% - calc(var(--border) * 2));
  align-items: center;
  background: inherit;
  border-radius: inherit;
  border-style: none;
}

.select select:focus, .select select:focus-within {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .select select:focus, .select select:focus-within {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }
}

.select select:not(:last-child) {
  margin-inline-end: calc(0.25rem * -5.5);
  background-image: none;
}

.select:focus, .select:focus-within {
  --input-color: var(--color-base-content);
  box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
  outline: 2px solid var(--input-color);
  outline-offset: 2px;
  isolation: isolate;
  z-index: 1;
}

.select:has(> select[disabled]), .select:is(:disabled, [disabled]), fieldset:disabled .select {
  cursor: not-allowed;
  border-color: var(--color-base-200);
  background-color: var(--color-base-200);
  color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
}

.select:has(> select[disabled])::-moz-placeholder, .select:is(:disabled, [disabled])::-moz-placeholder, fieldset:disabled .select::-moz-placeholder {
  color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
}

.select:has(> select[disabled])::placeholder, .select:is(:disabled, [disabled])::placeholder, fieldset:disabled .select::placeholder {
  color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
}

.select:has(> select[disabled]) > select[disabled] {
  cursor: not-allowed;
}

@supports ((-webkit-appearance: base-select) or (-moz-appearance: base-select) or (appearance: base-select)) {
  .select, .select select {
    -webkit-appearance: base-select;
       -moz-appearance: base-select;
            appearance: base-select;
  }

  .select::picker(select), .select select::picker(select) {
    -webkit-appearance: base-select;
       -moz-appearance: base-select;
            appearance: base-select;
  }
}

.select::picker(select), .select select::picker(select) {
  color: inherit;
  max-height: min(24rem, 70dvh);
  border: var(--border) solid var(--color-base-200);
  margin-block: calc(0.25rem * 2);
  border-radius: var(--radius-box);
  padding: calc(0.25rem * 2);
  background-color: inherit;
  box-shadow: 0 2px calc(var(--depth) * 3px) -2px oklch(0% 0 0/0.2);
  box-shadow: 0 20px 25px -5px rgb(0 0 0 / calc(var(--depth) * 0.1)), 0 8px 10px -6px rgb(0 0 0 / calc(var(--depth) * 0.1));
}

.select::picker-icon, .select select::picker-icon {
  display: none;
}

.select optgroup, .select select optgroup {
  padding-top: 0.5em;
}

.select optgroup option:nth-child(1), .select select optgroup option:nth-child(1) {
  margin-top: 0.5em;
}

.select option, .select select option {
  border-radius: var(--radius-field);
  padding-inline: calc(0.25rem * 3);
  padding-block: calc(0.25rem * 1.5);
  transition-property: color, background-color;
  transition-duration: 0.2s;
  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
}

.select option:not(:disabled):hover, .select option:not(:disabled):focus-visible, .select select option:not(:disabled):hover, .select select option:not(:disabled):focus-visible {
  cursor: pointer;
  background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .select option:not(:disabled):hover, .select option:not(:disabled):focus-visible, .select select option:not(:disabled):hover, .select select option:not(:disabled):focus-visible {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }
}

.select option:not(:disabled):active, .select select option:not(:disabled):active {
  background-color: var(--color-neutral);
  color: var(--color-neutral-content);
  box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--color-neutral);
}

@keyframes skeleton {
  0% {
    background-position: 150%;
  }

  100% {
    background-position: -50%;
  }
}

.navbar {
  display: flex;
  width: 100%;
  align-items: center;
  padding: 0.5rem;
  min-height: 4rem;
}

.footer {
  display: grid;
  width: 100%;
  grid-auto-flow: row;
  place-items: start;
  -moz-column-gap: calc(0.25rem * 4);
       column-gap: calc(0.25rem * 4);
  row-gap: calc(0.25rem * 10);
  font-size: 0.875rem;
  line-height: 1.25rem;
}

.footer > * {
  display: grid;
  place-items: start;
  gap: calc(0.25rem * 2);
}

.footer.footer-center {
  grid-auto-flow: column dense;
  place-items: center;
  text-align: center;
}

.footer.footer-center > * {
  place-items: center;
}

.footer-title {
  margin-bottom: calc(0.25rem * 2);
  text-transform: uppercase;
  opacity: 60%;
  font-weight: 600;
}

.footer-horizontal.footer-center {
  grid-auto-flow: row dense;
}

.footer-vertical.footer-center {
  grid-auto-flow: column dense;
}

.mockup-browser .mockup-browser-toolbar .\!input {
  margin-inline: auto !important;
  display: flex !important;
  height: 100% !important;
  align-items: center !important;
  gap: calc(0.25rem * 2) !important;
  overflow: hidden !important;
  background-color: var(--color-base-200) !important;
  text-overflow: ellipsis !important;
  white-space: nowrap !important;
  font-size: 0.75rem !important;
  direction: ltr !important;
}

.mockup-browser .mockup-browser-toolbar .input {
  margin-inline: auto;
  display: flex;
  height: 100%;
  align-items: center;
  gap: calc(0.25rem * 2);
  overflow: hidden;
  background-color: var(--color-base-200);
  text-overflow: ellipsis;
  white-space: nowrap;
  font-size: 0.75rem;
  direction: ltr;
}

.mockup-browser .mockup-browser-toolbar .\!input:before {
  content: "" !important;
  width: calc(0.25rem * 4) !important;
  height: calc(0.25rem * 4) !important;
  opacity: 50% !important;
  background-color: currentColor !important;
  -webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z' clip-rule='evenodd' /%3E%3C/svg%3E") no-repeat center !important;
          mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z' clip-rule='evenodd' /%3E%3C/svg%3E") no-repeat center !important;
  -webkit-mask-size: contain !important;
          mask-size: contain !important;
}

.mockup-browser .mockup-browser-toolbar .input:before {
  content: "";
  width: calc(0.25rem * 4);
  height: calc(0.25rem * 4);
  opacity: 50%;
  background-color: currentColor;
  -webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z' clip-rule='evenodd' /%3E%3C/svg%3E") no-repeat center;
          mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z' clip-rule='evenodd' /%3E%3C/svg%3E") no-repeat center;
  -webkit-mask-size: contain;
          mask-size: contain;
}

@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}

.status {
  display: inline-block;
  aspect-ratio: 1 / 1;
  width: calc(0.25rem * 2);
  height: calc(0.25rem * 2);
  border-radius: var(--radius-selector);
  background-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
  background-position: center;
  background-repeat: no-repeat;
  vertical-align: middle;
  color: color-mix(in srgb, #000 30%, transparent);
}

@supports (color: color-mix(in lab, red, red)) {
  .status {
    color: color-mix(in oklab, var(--color-black) 30%, transparent);
  }
}

.status {
  background-image: radial-gradient( circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * 0.5)), #0000 );
  box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
}

.link {
  cursor: pointer;
  text-decoration-line: underline;
}

.link:focus {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .link:focus {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }
}

.link:focus-visible {
  outline: 2px solid currentColor;
  outline-offset: 2px;
}

.link-hover {
  text-decoration-line: none;
}

@media (hover: hover) {
  .link-hover:hover {
    text-decoration-line: underline;
  }
}

.link-primary {
  color: var(--color-primary);
}

@media (hover: hover) {
  .link-primary:hover {
    color: color-mix(in oklab, var(--color-primary) 80%, #000);
  }
}

.link-secondary {
  color: var(--color-secondary);
}

@media (hover: hover) {
  .link-secondary:hover {
    color: color-mix(in oklab, var(--color-secondary) 80%, #000);
  }
}

.link-accent {
  color: var(--color-accent);
}

@media (hover: hover) {
  .link-accent:hover {
    color: color-mix(in oklab, var(--color-accent) 80%, #000);
  }
}

:where(.btn) {
  width: unset;
}

.btn {
  display: inline-flex;
  flex-shrink: 0;
  cursor: pointer;
  flex-wrap: nowrap;
  align-items: center;
  justify-content: center;
  gap: calc(0.25rem * 1.5);
  text-align: center;
  vertical-align: middle;
  outline-offset: 2px;
  webkit-user-select: none;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  padding-inline: var(--btn-p);
  color: var(--btn-fg);
  --tw-prose-links: var(--btn-fg);
  height: var(--size);
  font-size: var(--fontsize, 0.875rem);
  font-weight: 600;
  outline-color: var(--btn-color, var(--color-base-content));
  transition-property: color, background-color, border-color, box-shadow;
  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
  transition-duration: 0.2s;
  border-start-start-radius: var(--join-ss, var(--radius-field));
  border-start-end-radius: var(--join-se, var(--radius-field));
  border-end-start-radius: var(--join-es, var(--radius-field));
  border-end-end-radius: var(--join-ee, var(--radius-field));
  background-color: var(--btn-bg);
  background-size: auto, calc(var(--noise) * 100%);
  background-image: none, var(--btn-noise);
  border-width: var(--border);
  border-style: solid;
  border-color: var(--btn-border);
  text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
  touch-action: manipulation;
  box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow);
  --size: calc(var(--size-field, 0.25rem) * 10);
  --btn-bg: var(--btn-color, var(--color-base-200));
  --btn-fg: var(--color-base-content);
  --btn-p: 1rem;
  --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
  --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000),
    0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
  --btn-noise: var(--fx-noise);
}

.prose .btn {
  text-decoration-line: none;
}

@media (hover: hover) {
  .btn:hover {
    --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
  }
}

.btn:focus-visible, .btn:has(:focus-visible) {
  outline-width: 2px;
  outline-style: solid;
  isolation: isolate;
}

.btn:active:not(.btn-active) {
  translate: 0 0.5px;
  --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%);
  --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
  --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
}

.btn:is(:disabled, [disabled], .btn-disabled):not(.btn-link, .btn-ghost) {
  background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
  box-shadow: none;
}

.btn:is(:disabled, [disabled], .btn-disabled) {
  pointer-events: none;
  --btn-border: #0000;
  --btn-noise: none;
  --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
}

@media (hover: hover) {
  .btn:is(:disabled, [disabled], .btn-disabled):hover {
    pointer-events: none;
    background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
    --btn-border: #0000;
    --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
  }
}

.btn:is(input[type="checkbox"], input[type="radio"]) {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}

.btn:is(input[type="checkbox"], input[type="radio"])::after {
  content: attr(aria-label);
}

.btn:where(input:checked:not(.filter .btn)) {
  --btn-color: var(--color-primary);
  --btn-fg: var(--color-primary-content);
  isolation: isolate;
}

.btn-primary {
  --btn-color: var(--color-primary);
  --btn-fg: var(--color-primary-content);
}

.btn-secondary {
  --btn-color: var(--color-secondary);
  --btn-fg: var(--color-secondary-content);
}

.btn-neutral {
  --btn-color: var(--color-neutral);
  --btn-fg: var(--color-neutral-content);
}

.btn-ghost:not(.btn-active, :hover, :active:focus, :focus-visible) {
  --btn-shadow: "";
  --btn-bg: #0000;
  --btn-border: #0000;
  --btn-noise: none;
}

.btn-ghost:not(.btn-active, :hover, :active:focus, :focus-visible):not(:disabled, [disabled], .btn-disabled) {
  outline-color: currentColor;
  --btn-fg: currentColor;
}

@media (hover: none) {
  .btn-ghost:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
    --btn-shadow: "";
    --btn-bg: #0000;
    --btn-border: #0000;
    --btn-noise: none;
    --btn-fg: currentColor;
  }
}

.btn-outline:not( .btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled, :checked ) {
  --btn-shadow: "";
  --btn-bg: #0000;
  --btn-fg: var(--btn-color);
  --btn-border: var(--btn-color);
  --btn-noise: none;
}

@media (hover: none) {
  .btn-outline:hover:not( .btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled, :checked ) {
    --btn-shadow: "";
    --btn-bg: #0000;
    --btn-fg: var(--btn-color);
    --btn-border: var(--btn-color);
    --btn-noise: none;
  }
}

.btn-xs {
  --fontsize: 0.6875rem;
  --btn-p: 0.5rem;
  --size: calc(var(--size-field, 0.25rem) * 6);
}

.btn-lg {
  --fontsize: 1.125rem;
  --btn-p: 1.25rem;
  --size: calc(var(--size-field, 0.25rem) * 12);
}

.btn-square {
  padding-inline: calc(0.25rem * 0);
  width: var(--size);
  height: var(--size);
}

.btn-block {
  width: 100%;
}

.table {
  font-size: 0.875rem;
  position: relative;
  width: 100%;
  border-radius: var(--radius-box);
  text-align: left;
}

.table:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
  text-align: right;
}

@media (hover: hover) {
  .table tr.row-hover:hover, .table tr.row-hover:nth-child(even):hover {
    background-color: var(--color-base-200);
  }
}

.table :where(th, td) {
  padding-inline: calc(0.25rem * 4);
  padding-block: calc(0.25rem * 3);
  vertical-align: middle;
}

.table :where(thead, tfoot) {
  white-space: nowrap;
  color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
  font-size: 0.875rem;
  font-weight: 600;
}

.table :where(tfoot) {
  border-top: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
}

.table :where(.table-pin-rows thead tr) {
  position: sticky;
  top: calc(0.25rem * 0);
  z-index: 1;
  background-color: var(--color-base-100);
}

.table :where(.table-pin-rows tfoot tr) {
  position: sticky;
  bottom: calc(0.25rem * 0);
  z-index: 1;
  background-color: var(--color-base-100);
}

.table :where(.table-pin-cols tr th) {
  position: sticky;
  right: calc(0.25rem * 0);
  left: calc(0.25rem * 0);
  background-color: var(--color-base-100);
}

.table :where(thead tr, tbody tr:not(:last-child)) {
  border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
}

.loading {
  pointer-events: none;
  display: inline-block;
  aspect-ratio: 1 / 1;
  background-color: currentColor;
  vertical-align: middle;
  width: calc(var(--size-selector, 0.25rem) * 6);
  -webkit-mask-size: 100%;
          mask-size: 100%;
  -webkit-mask-repeat: no-repeat;
          mask-repeat: no-repeat;
  -webkit-mask-position: center;
          mask-position: center;
  -webkit-mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
          mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
}

.tabs {
  display: flex;
  flex-wrap: wrap;
  --tabs-height: auto;
  --tabs-direction: row;
  --tab-height: calc(var(--size-field, 0.25rem) * 10);
  height: var(--tabs-height);
  flex-direction: var(--tabs-direction);
}

.tab {
  position: relative;
  display: inline-flex;
  cursor: pointer;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
  text-align: center;
  webkit-user-select: none;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
}

@media (hover: hover) {
  .tab:hover {
    color: var(--color-base-content);
  }
}

.tab {
  --tab-p: 1rem;
  --tab-bg: var(--color-base-100);
  --tab-border-color: var(--color-base-300);
  --tab-radius-ss: 0;
  --tab-radius-se: 0;
  --tab-radius-es: 0;
  --tab-radius-ee: 0;
  --tab-order: 0;
  --tab-radius-min: calc(0.75rem - var(--border));
  border-color: #0000;
  order: var(--tab-order);
  height: var(--tab-height);
  font-size: 0.875rem;
  padding-inline-start: var(--tab-p);
  padding-inline-end: var(--tab-p);
}

.tab:is(input[type="radio"]) {
  min-width: -moz-fit-content;
  min-width: fit-content;
}

.tab:is(input[type="radio"]):after {
  content: attr(aria-label);
}

.tab:is(label) {
  position: relative;
}

.tab:is(label) input {
  position: absolute;
  inset: calc(0.25rem * 0);
  cursor: pointer;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  opacity: 0%;
}

.tab:checked + .tab-content, .tab:is(label:has(:checked)) + .tab-content, .tab:is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]) + .tab-content {
  display: block;
  height: calc(100% - var(--tab-height) + var(--border));
}

.tab:not(:checked, label:has(:checked), :hover, .tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]) {
  color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
}

.tab:not(input):empty {
  flex-grow: 1;
  cursor: default;
}

.tab:focus {
  --tw-outline-style: none;
  outline-style: none;
}

@media (forced-colors: active) {
  .tab:focus {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }
}

.tab:focus-visible, .tab:is(label:has(:checked:focus-visible)) {
  outline: 2px solid currentColor;
  outline-offset: -5px;
}

.tab[disabled] {
  pointer-events: none;
  opacity: 40%;
}

.tabs-border .tab {
  --tab-border-color: #0000 #0000 var(--tab-border-color) #0000;
  position: relative;
  border-radius: var(--radius-field);
}

.tabs-border .tab:before {
  --tw-content: "";
  content: var(--tw-content);
  background-color: var(--tab-border-color);
  transition: background-color 0.2s ease;
  width: 80%;
  height: 3px;
  border-radius: var(--radius-field);
  bottom: 0;
  left: 10%;
  position: absolute;
}

.tabs-border .tab:is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]):not(.tab-disabled, [disabled]):before, .tabs-border .tab:is(input:checked):before, .tabs-border .tab:is(label:has(:checked)):before {
  --tab-border-color: currentColor;
  border-top: 3px solid;
}

.tabs-lift > .tab {
  --tab-border: 0 0 var(--border) 0;
  --tab-radius-ss: min(var(--radius-field), var(--tab-radius-min));
  --tab-radius-se: min(var(--radius-field), var(--tab-radius-min));
  --tab-radius-es: 0;
  --tab-radius-ee: 0;
  --tab-paddings: var(--border) var(--tab-p) 0 var(--tab-p);
  --tab-border-colors: #0000 #0000 var(--tab-border-color) #0000;
  --tab-corner-width: calc(100% + min(var(--radius-field), var(--tab-radius-min)) * 2);
  --tab-corner-height: min(var(--radius-field), var(--tab-radius-min));
  --tab-corner-position: top left, top right;
  border-width: var(--tab-border);
  border-start-start-radius: var(--tab-radius-ss);
  border-start-end-radius: var(--tab-radius-se);
  border-end-start-radius: var(--tab-radius-es);
  border-end-end-radius: var(--tab-radius-ee);
  padding: var(--tab-paddings);
  border-color: var(--tab-border-colors);
}

.tabs-lift > .tab:is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]):not(.tab-disabled, [disabled]), .tabs-lift > .tab:is(input:checked, label:has(:checked)) {
  --tab-border: var(--border) var(--border) 0 var(--border);
  --tab-border-colors: var(--tab-border-color) var(--tab-border-color) #0000
        var(--tab-border-color);
  --tab-paddings: 0 calc(var(--tab-p) - var(--border)) var(--border)
        calc(var(--tab-p) - var(--border));
  --tab-inset: auto auto 0 auto;
  --tab-grad: calc(69% - var(--border));
  --radius-start: radial-gradient(
        circle at top left,
        #0000 var(--tab-grad),
        var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
        var(--tab-border-color) calc(var(--tab-grad) + var(--border)),
        var(--tab-bg) calc(var(--tab-grad) + var(--border) + 0.25px)
      );
  --radius-end: radial-gradient(
        circle at top right,
        #0000 var(--tab-grad),
        var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
        var(--tab-border-color) calc(var(--tab-grad) + var(--border)),
        var(--tab-bg) calc(var(--tab-grad) + var(--border) + 0.25px)
      );
  background-color: var(--tab-bg);
}

.tabs-lift > .tab:is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]):not(.tab-disabled, [disabled]):before, .tabs-lift > .tab:is(input:checked, label:has(:checked)):before {
  z-index: 1;
  content: "";
  display: block;
  position: absolute;
  width: var(--tab-corner-width);
  height: var(--tab-corner-height);
  background-position: var(--tab-corner-position);
  background-image: var(--radius-start), var(--radius-end);
  background-size: min(var(--radius-field), var(--tab-radius-min)) min(var(--radius-field), var(--tab-radius-min));
  background-repeat: no-repeat;
  inset: var(--tab-inset);
}

.tabs-lift > .tab:is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]):not(.tab-disabled, [disabled]):first-child:before, .tabs-lift > .tab:is(input:checked, label:has(:checked)):first-child:before {
  --radius-start: none;
}

[dir="rtl"] .tabs-lift > .tab:is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]):not(.tab-disabled, [disabled]):first-child:before, [dir="rtl"] .tabs-lift > .tab:is(input:checked, label:has(:checked)):first-child:before {
  transform: rotateY(180deg);
}

.tabs-lift > .tab:is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]):not(.tab-disabled, [disabled]):last-child:before, .tabs-lift > .tab:is(input:checked, label:has(:checked)):last-child:before {
  --radius-end: none;
}

[dir="rtl"] .tabs-lift > .tab:is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]):not(.tab-disabled, [disabled]):last-child:before, [dir="rtl"] .tabs-lift > .tab:is(input:checked, label:has(:checked)):last-child:before {
  transform: rotateY(180deg);
}

.tabs-lift:has(.tab-content) > .tab:first-child:not(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]) {
  --tab-border-colors: var(--tab-border-color) var(--tab-border-color) #0000
          var(--tab-border-color);
}

.tabs-lift .tab-content {
  --tabcontent-margin: calc(-1 * var(--border)) 0 0 0;
  --tabcontent-radius-ss: 0;
  --tabcontent-radius-se: var(--radius-box);
  --tabcontent-radius-es: var(--radius-box);
  --tabcontent-radius-ee: var(--radius-box);
}

.tabs-lift :checked + .tab-content:nth-child(1), .tabs-lift :checked + .tab-content:nth-child(n + 3), .tabs-lift label:has(:checked) + .tab-content:nth-child(1), .tabs-lift label:has(:checked) + .tab-content:nth-child(n + 3), .tabs-lift :is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]) + .tab-content:nth-child(1), .tabs-lift :is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]) + .tab-content:nth-child(n + 3) {
  --tabcontent-radius-ss: var(--radius-box);
}

.tabs-top .tab {
  --tab-order: 0;
  --tab-border: 0 0 var(--border) 0;
  --tab-radius-ss: min(var(--radius-field), var(--tab-radius-min));
  --tab-radius-se: min(var(--radius-field), var(--tab-radius-min));
  --tab-radius-es: 0;
  --tab-radius-ee: 0;
  --tab-paddings: var(--border) var(--tab-p) 0 var(--tab-p);
  --tab-border-colors: #0000 #0000 var(--tab-border-color) #0000;
  --tab-corner-width: calc(100% + min(var(--radius-field), var(--tab-radius-min)) * 2);
  --tab-corner-height: min(var(--radius-field), var(--tab-radius-min));
  --tab-corner-position: top left, top right;
}

.tabs-top .tab:is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]):not(.tab-disabled, [disabled]), .tabs-top .tab:is(input:checked), .tabs-top .tab:is(label:has(:checked)) {
  --tab-border: var(--border) var(--border) 0 var(--border);
  --tab-border-colors: var(--tab-border-color) var(--tab-border-color) #0000
        var(--tab-border-color);
  --tab-paddings: 0 calc(var(--tab-p) - var(--border)) var(--border)
        calc(var(--tab-p) - var(--border));
  --tab-inset: auto auto 0 auto;
  --radius-start: radial-gradient(
        circle at top left,
        #0000 var(--tab-grad),
        var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
        var(--tab-border-color) calc(var(--tab-grad) + var(--border)),
        var(--tab-bg) calc(var(--tab-grad) + var(--border) + 0.25px)
      );
  --radius-end: radial-gradient(
        circle at top right,
        #0000 var(--tab-grad),
        var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
        var(--tab-border-color) calc(var(--tab-grad) + var(--border)),
        var(--tab-bg) calc(var(--tab-grad) + var(--border) + 0.25px)
      );
}

.tabs-top:has(.tab-content) > .tab:first-child:not(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]) {
  --tab-border-colors: var(--tab-border-color) var(--tab-border-color) #0000
          var(--tab-border-color);
}

.tabs-top .tab-content {
  --tabcontent-order: 1;
  --tabcontent-margin: calc(-1 * var(--border)) 0 0 0;
  --tabcontent-radius-ss: 0;
  --tabcontent-radius-se: var(--radius-box);
  --tabcontent-radius-es: var(--radius-box);
  --tabcontent-radius-ee: var(--radius-box);
}

.tabs-top :checked + .tab-content:nth-child(1), .tabs-top :checked + .tab-content:nth-child(n + 3), .tabs-top label:has(:checked) + .tab-content:nth-child(1), .tabs-top label:has(:checked) + .tab-content:nth-child(n + 3), .tabs-top :is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]) + .tab-content:nth-child(1), .tabs-top :is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]) + .tab-content:nth-child(n + 3) {
  --tabcontent-radius-ss: var(--radius-box);
}

.tabs-bottom .tab {
  --tab-order: 1;
  --tab-border: var(--border) 0 0 0;
  --tab-radius-ss: 0;
  --tab-radius-se: 0;
  --tab-radius-es: min(var(--radius-field), var(--tab-radius-min));
  --tab-radius-ee: min(var(--radius-field), var(--tab-radius-min));
  --tab-border-colors: var(--tab-border-color) #0000 #0000 #0000;
  --tab-paddings: 0 var(--tab-p) var(--border) var(--tab-p);
  --tab-corner-width: calc(100% + min(var(--radius-field), var(--tab-radius-min)) * 2);
  --tab-corner-height: min(var(--radius-field), var(--tab-radius-min));
  --tab-corner-position: top left, top right;
}

.tabs-bottom .tab:is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]):not(.tab-disabled, [disabled]), .tabs-bottom .tab:is(input:checked), .tabs-bottom .tab:is(label:has(:checked)) {
  --tab-border: 0 var(--border) var(--border) var(--border);
  --tab-border-colors: #0000 var(--tab-border-color) var(--tab-border-color)
        var(--tab-border-color);
  --tab-paddings: var(--border) calc(var(--tab-p) - var(--border)) 0
        calc(var(--tab-p) - var(--border));
  --tab-inset: 0 auto auto auto;
  --radius-start: radial-gradient(
        circle at bottom left,
        #0000 var(--tab-grad),
        var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
        var(--tab-border-color) calc(var(--tab-grad) + var(--border)),
        var(--tab-bg) calc(var(--tab-grad) + var(--border) + 0.25px)
      );
  --radius-end: radial-gradient(
        circle at bottom right,
        #0000 var(--tab-grad),
        var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
        var(--tab-border-color) calc(var(--tab-grad) + var(--border)),
        var(--tab-bg) calc(var(--tab-grad) + var(--border) + 0.25px)
      );
}

.tabs-bottom:has(.tab-content) > .tab:first-child:not(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]) {
  --tab-border-colors: #0000 var(--tab-border-color) var(--tab-border-color)
          var(--tab-border-color);
}

.tabs-bottom .tab-content {
  --tabcontent-order: 0;
  --tabcontent-margin: 0 0 calc(-1 * var(--border)) 0;
  --tabcontent-radius-ss: var(--radius-box);
  --tabcontent-radius-se: var(--radius-box);
  --tabcontent-radius-es: 0;
  --tabcontent-radius-ee: var(--radius-box);
}

.tabs-bottom > :checked + .tab-content:not(:nth-child(2)), .tabs-bottom > :is(label:has(:checked)) + .tab-content:not(:nth-child(2)), .tabs-bottom > :is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]) + .tab-content:not(:nth-child(2)) {
  --tabcontent-radius-es: var(--radius-box);
}

.tabs-box .tab {
  border-radius: var(--radius-field);
  border-style: none;
}

.tabs-box .tab:focus-visible, .tabs-box .tab:is(label:has(:checked:focus-visible)) {
  outline-offset: 2px;
}

.tab-content {
  order: 1;
  order: var(--tabcontent-order);
  display: none;
  border-color: transparent;
  --tabcontent-radius-ss: 0;
  --tabcontent-radius-se: 0;
  --tabcontent-radius-es: 0;
  --tabcontent-radius-ee: 0;
  --tabcontent-order: 1;
  width: 100%;
  margin: var(--tabcontent-margin);
  border-width: var(--border);
  border-start-start-radius: var(--tabcontent-radius-ss);
  border-start-end-radius: var(--tabcontent-radius-se);
  border-end-start-radius: var(--tabcontent-radius-es);
  border-end-end-radius: var(--tabcontent-radius-ee);
}

.tabs-xs :where(.tab) {
  font-size: 0.75rem;
  --tab-p: 0.375rem;
  --tab-radius-min: calc(0.5rem - var(--border));
}

.tabs-sm :where(.tab) {
  font-size: 0.875rem;
  --tab-p: 0.5rem;
  --tab-radius-min: calc(0.5rem - var(--border));
}

.tabs-md :where(.tab) {
  font-size: 0.875rem;
  --tab-p: 0.75rem;
  --tab-radius-min: calc(0.75rem - var(--border));
}

.tabs-lg :where(.tab) {
  font-size: 1.125rem;
  --tab-p: 1rem;
  --tab-radius-min: calc(1.5rem - var(--border));
}

.tabs-xl :where(.tab) {
  font-size: 1.125rem;
  --tab-p: 1.25rem;
  --tab-radius-min: calc(2rem - var(--border));
}

/* Fix DaisyUI v5 touch-action interference with double-click text selection */

.\!input {
  touch-action: auto !important;
  /* Restore native text selection behavior */
}

.input {
  touch-action: auto !important;
  /* Restore native text selection behavior */
}

/* Prevent iOS zoom on search input focus */

.mobile-search-input {
  font-size: 16px !important;
  /* Minimum 16px prevents iOS zoom */
  -webkit-text-size-adjust: 100% !important;
  -webkit-appearance: none !important;
}

/* Higher z-index for mobile search dropdown */

.\!dropdown .dropdown-content[id*="mobile-navbar"] {
  z-index: 60 !important;
  /* Above navbar z-50 */
}

.dropdown .dropdown-content[id*="mobile-navbar"] {
  z-index: 60 !important;
  /* Above navbar z-50 */
}

/* Fix alert container and content overflow for all content types */

.alert,
  .alert-info,
  .alert-warning, 
  .alert-success,
  .alert-error {
  overflow-x: auto !important;
  overflow-y: visible !important;
  max-width: 100% !important;
  min-width: 0 !important;
}

/* Fix alert content containers */

.alert .alert-content-container,
  .alert-info .alert-content-container,
  .alert-warning .alert-content-container,
  .alert-success .alert-content-container,
  .alert-error .alert-content-container {
  overflow-x: auto !important;
  overflow-y: visible !important;
  max-width: 100% !important;
  min-width: 0 !important;
  flex-shrink: 1 !important;
}

/* Fix alert content divs */

.alert .alert-content-container > div,
  .alert-info .alert-content-container > div,
  .alert-warning .alert-content-container > div,
  .alert-success .alert-content-container > div,
  .alert-error .alert-content-container > div {
  overflow-x: auto !important;
  overflow-y: visible !important;
  max-width: 100% !important;
  min-width: 0 !important;
}

/* Ensure alert code blocks are scrollable */

.alert pre,
  .alert-info pre,
  .alert-warning pre,
  .alert-success pre,
  .alert-error pre {
  overflow-x: auto !important;
  overflow-y: hidden !important;
  white-space: pre !important;
  word-break: keep-all !important;
  -webkit-overflow-scrolling: touch !important;
  scrollbar-width: thin !important;
  max-width: 100% !important;
  width: 100% !important;
}

/* Prevent line breaks in page navigation - catch ALL anchor tags */

.lg\\:hidden .dropdown-content a {
  white-space: nowrap !important;
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  max-width: 100% !important;
  display: block !important;
  word-break: keep-all !important;
}

/* Force single line for all text within page navigation */

.lg\\:hidden .dropdown-content * {
  white-space: nowrap !important;
}

/* Ensure mobile page nav dropdown has proper width */

.lg\\:hidden .dropdown-bottom .dropdown-content {
  min-width: 320px !important;
  max-width: 90vw !important;
  width: 320px !important;
}

/* Make sure list items don't cause breaks */

.lg\\:hidden .dropdown-content li {
  min-width: 0 !important;
  flex-shrink: 1 !important;
  overflow: hidden !important;
}

/* Fix DaisyUI v5 dropdown-open disabling pointer events on search inputs */

.\!dropdown.dropdown-open > .input[tabindex] {
  pointer-events: auto !important;
  /* Re-enable mouse events for text selection */
}

.dropdown.dropdown-open > .input[tabindex] {
  pointer-events: auto !important;
  /* Re-enable mouse events for text selection */
}

.dropdown.dropdown-open > .\!input[tabindex] {
  pointer-events: auto !important;
  /* Re-enable mouse events for text selection */
}

/* Basic performance optimizations */

* {
  -webkit-overflow-scrolling: touch;
  box-sizing: border-box;
}

/* Ensure no default margins/padding cause scrolling issues */

html, body {
  margin: 0 !important;
  padding: 0 !important;
}

/* Search result styling - clean single-column layout */

#search-results,
  #search-results-mobile-navbar {
  display: flex !important;
  flex-direction: column !important;
  list-style: none !important;
  margin: 0 !important;
  padding: 0.5rem !important;
  gap: 0 !important;
}

#search-results li,
  #search-results-mobile-navbar li {
  display: block !important;
  width: 100% !important;
  margin: 0 !important;
  padding: 0 !important;
  list-style: none !important;
}

#search-results a,
  #search-results-mobile-navbar a {
  display: flex !important;
  flex-direction: column !important;
  width: 100% !important;
  padding: 0.75rem !important;
  margin: 0 !important;
  border-radius: 0.5rem !important;
  text-decoration: none !important;
  color: inherit !important;
  white-space: normal !important;
  line-height: 1.4 !important;
  transition: background-color 0.15s ease !important;
}

/* Hover states - simple and reliable */

#search-results a:hover,
  #search-results-mobile-navbar a:hover {
  background-color: #3b82f6 !important;
  /* Blue background */
  color: white !important;
  border-radius: 0.5rem !important;
  transition: all 0.15s ease !important;
}

#search-results a:hover *,
  #search-results-mobile-navbar a:hover * {
  color: white !important;
}

/* Disable hover effects when in keyboard navigation mode */

#search-results.keyboard-navigation a:hover,
  #search-results-mobile-navbar.keyboard-navigation a:hover {
  background-color: transparent !important;
  color: inherit !important;
}

#search-results.keyboard-navigation a:hover *,
  #search-results-mobile-navbar.keyboard-navigation a:hover * {
  color: inherit !important;
}

/* Keyboard selection states - bright and obvious */

#search-results a.selected,
  #search-results-mobile-navbar a.selected {
  background-color: #1d4ed8 !important;
  /* Darker blue background */
  color: white !important;
  border-radius: 0.5rem !important;
  outline: 2px solid #3b82f6 !important;
  outline-offset: 2px !important;
  transition: all 0.15s ease !important;
}

#search-results a.selected *,
  #search-results-mobile-navbar a.selected * {
  color: white !important;
}

/* Dark theme adjustments */

[data-theme="dark"] #search-results a:hover,
  [data-theme="dark"] #search-results-mobile-navbar a:hover {
  background-color: #60a5fa !important;
  /* Lighter blue for dark theme */
  color: #1e293b !important;
  /* Dark text on light background */
}

[data-theme="dark"] #search-results a:hover *,
  [data-theme="dark"] #search-results-mobile-navbar a:hover * {
  color: #1e293b !important;
}

/* Disable hover effects in keyboard mode for dark theme */

[data-theme="dark"] #search-results.keyboard-navigation a:hover,
  [data-theme="dark"] #search-results-mobile-navbar.keyboard-navigation a:hover {
  background-color: transparent !important;
  color: inherit !important;
}

[data-theme="dark"] #search-results.keyboard-navigation a:hover *,
  [data-theme="dark"] #search-results-mobile-navbar.keyboard-navigation a:hover * {
  color: inherit !important;
}

[data-theme="dark"] #search-results a.selected,
  [data-theme="dark"] #search-results-mobile-navbar a.selected {
  background-color: #3b82f6 !important;
  color: white !important;
  outline-color: #60a5fa !important;
}

[data-theme="dark"] #search-results a.selected *,
  [data-theme="dark"] #search-results-mobile-navbar a.selected * {
  color: white !important;
}

/* Position sidebar below sticky navbar */

.drawer-side {
  top: 4rem !important;
  /* Height of sticky navbar */
  height: calc(100vh - 4rem) !important;
  /* Full height minus navbar */
  z-index: 40 !important;
  /* Below navbar z-50 */
}

/* Ensure drawer takes proper height for sticky footer */

.drawer {
  min-height: 0 !important;
  /* Let flexbox handle the height */
}

.drawer-content {
  min-height: inherit !important;
}

/* Navigation and dropdown enhancements */

details[open] summary svg {
  transform: rotate(180deg);
}

.\!dropdown:focus-within [role="button"] svg {
  transform: rotate(180deg) !important;
}

.dropdown:focus-within [role="button"] svg {
  transform: rotate(180deg);
}

summary::-webkit-details-marker {
  display: none;
}

summary::marker {
  display: none;
}

.visible {
  visibility: visible;
}

.collapse {
  visibility: collapse;
}

.static {
  position: static;
}

.fixed {
  position: fixed;
}

.absolute {
  position: absolute;
}

.relative {
  position: relative;
}

.sticky {
  position: sticky;
}

.right-2 {
  right: 0.5rem;
}

.right-4 {
  right: 1rem;
}

.top-0 {
  top: 0px;
}

.top-10 {
  top: 2.5rem;
}

.top-2 {
  top: 0.5rem;
}

.top-20 {
  top: 5rem;
}

.z-10 {
  z-index: 10;
}

.z-40 {
  z-index: 40;
}

.z-50 {
  z-index: 50;
}

.z-\[1\] {
  z-index: 1;
}

.z-\[40\] {
  z-index: 40;
}

.z-\[50\] {
  z-index: 50;
}

.z-\[60\] {
  z-index: 60;
}

.order-1 {
  order: 1;
}

.order-2 {
  order: 2;
}

.mx-auto {
  margin-left: auto;
  margin-right: auto;
}

.mb-0 {
  margin-bottom: 0px;
}

.mb-12 {
  margin-bottom: 3rem;
}

.mb-2 {
  margin-bottom: 0.5rem;
}

.mb-4 {
  margin-bottom: 1rem;
}

.mb-6 {
  margin-bottom: 1.5rem;
}

.mb-8 {
  margin-bottom: 2rem;
}

.me-3 {
  margin-inline-end: 0.75rem;
}

.mr-2 {
  margin-right: 0.5rem;
}

.mr-3 {
  margin-right: 0.75rem;
}

.mt-1 {
  margin-top: 0.25rem;
}

.mt-4 {
  margin-top: 1rem;
}

.mt-8 {
  margin-top: 2rem;
}

.block {
  display: block;
}

.inline-block {
  display: inline-block;
}

.inline {
  display: inline;
}

.flex {
  display: flex;
}

.inline-flex {
  display: inline-flex;
}

.table {
  display: table;
}

.grid {
  display: grid;
}

.contents {
  display: contents;
}

.hidden {
  display: none;
}

.aspect-square {
  aspect-ratio: 1 / 1;
}

.size-4 {
  width: 1rem;
  height: 1rem;
}

.h-12 {
  height: 3rem;
}

.h-4 {
  height: 1rem;
}

.h-5 {
  height: 1.25rem;
}

.h-6 {
  height: 1.5rem;
}

.h-\[calc\(100vh-6rem\)\] {
  height: calc(100vh - 6rem);
}

.h-auto {
  height: auto;
}

.h-full {
  height: 100%;
}

.max-h-96 {
  max-height: 24rem;
}

.min-h-\[50vh\] {
  min-height: 50vh;
}

.min-h-full {
  min-height: 100%;
}

.min-h-screen {
  min-height: 100vh;
}

.w-12 {
  width: 3rem;
}

.w-24 {
  width: 6rem;
}

.w-32 {
  width: 8rem;
}

.w-4 {
  width: 1rem;
}

.w-5 {
  width: 1.25rem;
}

.w-52 {
  width: 13rem;
}

.w-6 {
  width: 1.5rem;
}

.w-60 {
  width: 15rem;
}

.w-64 {
  width: 16rem;
}

.w-72 {
  width: 18rem;
}

.w-80 {
  width: 20rem;
}

.w-96 {
  width: 24rem;
}

.w-full {
  width: 100%;
}

.min-w-0 {
  min-width: 0px;
}

.\!max-w-\[920px\] {
  max-width: 920px !important;
}

.\!max-w-none {
  max-width: none !important;
}

.max-w-2xl {
  max-width: 42rem;
}

.max-w-3xl {
  max-width: 48rem;
}

.max-w-4xl {
  max-width: 56rem;
}

.max-w-6xl {
  max-width: 72rem;
}

.flex-1 {
  flex: 1 1 0%;
}

.flex-none {
  flex: none;
}

.flex-shrink-0 {
  flex-shrink: 0;
}

.shrink-0 {
  flex-shrink: 0;
}

.transform {
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

.cursor-pointer {
  cursor: pointer;
}

.grid-cols-1 {
  grid-template-columns: repeat(1, minmax(0, 1fr));
}

.flex-col {
  flex-direction: column;
}

.flex-wrap {
  flex-wrap: wrap;
}

.items-start {
  align-items: flex-start;
}

.items-center {
  align-items: center;
}

.items-stretch {
  align-items: stretch;
}

.justify-start {
  justify-content: flex-start;
}

.justify-center {
  justify-content: center;
}

.justify-between {
  justify-content: space-between;
}

.gap-3 {
  gap: 0.75rem;
}

.gap-4 {
  gap: 1rem;
}

.gap-8 {
  gap: 2rem;
}

.space-y-4 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 0;
  margin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(1rem * var(--tw-space-y-reverse));
}

.overflow-hidden {
  overflow: hidden;
}

.overflow-x-auto {
  overflow-x: auto;
}

.overflow-y-auto {
  overflow-y: auto;
}

.overflow-x-hidden {
  overflow-x: hidden;
}

.truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.text-ellipsis {
  text-overflow: ellipsis;
}

.whitespace-nowrap {
  white-space: nowrap;
}

.rounded-box {
  border-radius: var(--radius-box);
}

.rounded-full {
  border-radius: 9999px;
}

.rounded-lg {
  border-radius: 0.5rem;
}

.border {
  border-width: 1px;
}

.border-2 {
  border-width: 2px;
}

.border-b {
  border-bottom-width: 1px;
}

.border-l {
  border-left-width: 1px;
}

.border-t {
  border-top-width: 1px;
}

.border-base-300 {
  border-color: var(--color-base-300);
}

.border-primary {
  border-color: var(--color-primary);
}

.border-primary-content {
  border-color: var(--color-primary-content);
}

.bg-base-100 {
  background-color: var(--color-base-100);
}

.bg-base-200 {
  background-color: var(--color-base-200);
}

.bg-base-300 {
  background-color: var(--color-base-300);
}

.bg-blue-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(219 234 254 / var(--tw-bg-opacity, 1));
}

.bg-primary {
  background-color: var(--color-primary);
}

.bg-white {
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));
}

.bg-gradient-to-br {
  background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));
}

.from-purple-200 {
  --tw-gradient-from: #e9d5ff var(--tw-gradient-from-position);
  --tw-gradient-to: rgb(233 213 255 / 0) var(--tw-gradient-to-position);
  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
}

.from-slate-50 {
  --tw-gradient-from: #f8fafc var(--tw-gradient-from-position);
  --tw-gradient-to: rgb(248 250 252 / 0) var(--tw-gradient-to-position);
  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
}

.to-blue-50 {
  --tw-gradient-to: #eff6ff var(--tw-gradient-to-position);
}

.to-indigo-200 {
  --tw-gradient-to: #c7d2fe var(--tw-gradient-to-position);
}

.fill-current {
  fill: currentColor;
}

.stroke-current {
  stroke: currentColor;
}

.object-contain {
  -o-object-fit: contain;
     object-fit: contain;
}

.object-cover {
  -o-object-fit: cover;
     object-fit: cover;
}

.p-1 {
  padding: 0.25rem;
}

.p-2 {
  padding: 0.5rem;
}

.p-3 {
  padding: 0.75rem;
}

.p-4 {
  padding: 1rem;
}

.px-4 {
  padding-left: 1rem;
  padding-right: 1rem;
}

.px-6 {
  padding-left: 1.5rem;
  padding-right: 1.5rem;
}

.px-8 {
  padding-left: 2rem;
  padding-right: 2rem;
}

.py-16 {
  padding-top: 4rem;
  padding-bottom: 4rem;
}

.py-2 {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}

.py-20 {
  padding-top: 5rem;
  padding-bottom: 5rem;
}

.pb-3 {
  padding-bottom: 0.75rem;
}

.pl-4 {
  padding-left: 1rem;
}

.text-center {
  text-align: center;
}

.font-mono {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
}

.text-2xl {
  font-size: 1.5rem;
  line-height: 2rem;
}

.text-3xl {
  font-size: 1.875rem;
  line-height: 2.25rem;
}

.text-4xl {
  font-size: 2.25rem;
  line-height: 2.5rem;
}

.text-5xl {
  font-size: 3rem;
  line-height: 1;
}

.text-lg {
  font-size: 1.125rem;
  line-height: 1.75rem;
}

.text-sm {
  font-size: 0.875rem;
  line-height: 1.25rem;
}

.text-xl {
  font-size: 1.25rem;
  line-height: 1.75rem;
}

.text-xs {
  font-size: 0.75rem;
  line-height: 1rem;
}

.font-bold {
  font-weight: 700;
}

.font-medium {
  font-weight: 500;
}

.font-semibold {
  font-weight: 600;
}

.uppercase {
  text-transform: uppercase;
}

.lowercase {
  text-transform: lowercase;
}

.capitalize {
  text-transform: capitalize;
}

.italic {
  font-style: italic;
}

.leading-relaxed {
  line-height: 1.625;
}

.tracking-wide {
  letter-spacing: 0.025em;
}

.text-accent {
  color: var(--color-accent);
}

.text-base-content {
  color: var(--color-base-content);
}

.text-blue-800 {
  --tw-text-opacity: 1;
  color: rgb(30 64 175 / var(--tw-text-opacity, 1));
}

.text-gray-600 {
  --tw-text-opacity: 1;
  color: rgb(75 85 99 / var(--tw-text-opacity, 1));
}

.text-gray-900 {
  --tw-text-opacity: 1;
  color: rgb(17 24 39 / var(--tw-text-opacity, 1));
}

.text-primary {
  color: var(--color-primary);
}

.text-primary-content {
  color: var(--color-primary-content);
}

.text-secondary {
  color: var(--color-secondary);
}

.text-success {
  color: var(--color-success);
}

.underline {
  text-decoration-line: underline;
}

.opacity-0 {
  opacity: 0;
}

.opacity-100 {
  opacity: 1;
}

.opacity-50 {
  opacity: 0.5;
}

.opacity-70 {
  opacity: 0.7;
}

.opacity-90 {
  opacity: 0.9;
}

.shadow {
  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.shadow-lg {
  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.shadow-sm {
  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.shadow-xl {
  --tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
  --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.outline {
  outline-style: solid;
}

.blur {
  --tw-blur: blur(8px);
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

.filter {
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

.transition-all {
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

.transition-opacity {
  transition-property: opacity;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

.transition-transform {
  transition-property: transform;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

.duration-200 {
  transition-duration: 200ms;
}

.duration-300 {
  transition-duration: 300ms;
}

.rounded-box {
  border-radius: var(--radius-box);
}

.join {
  display: inline-flex;
  align-items: stretch;
  --join-ss: 0;
  --join-se: 0;
  --join-es: 0;
  --join-ee: 0;
}

.join :where(.join-item) {
  border-start-start-radius: var(--join-ss, 0);
  border-start-end-radius: var(--join-se, 0);
  border-end-start-radius: var(--join-es, 0);
  border-end-end-radius: var(--join-ee, 0);
}

.join :where(.join-item) * {
  --join-ss: var(--radius-field);
  --join-se: var(--radius-field);
  --join-es: var(--radius-field);
  --join-ee: var(--radius-field);
}

.join > .join-item:where(:first-child) {
  --join-ss: var(--radius-field);
  --join-se: 0;
  --join-es: var(--radius-field);
  --join-ee: 0;
}

.join :first-child:not(:last-child) :where(.join-item) {
  --join-ss: var(--radius-field);
  --join-se: 0;
  --join-es: var(--radius-field);
  --join-ee: 0;
}

.join > .join-item:where(:last-child) {
  --join-ss: 0;
  --join-se: var(--radius-field);
  --join-es: 0;
  --join-ee: var(--radius-field);
}

.join :last-child:not(:first-child) :where(.join-item) {
  --join-ss: 0;
  --join-se: var(--radius-field);
  --join-es: 0;
  --join-ee: var(--radius-field);
}

.join > .join-item:where(:only-child) {
  --join-ss: var(--radius-field);
  --join-se: var(--radius-field);
  --join-es: var(--radius-field);
  --join-ee: var(--radius-field);
}

.join :only-child :where(.join-item) {
  --join-ss: var(--radius-field);
  --join-se: var(--radius-field);
  --join-es: var(--radius-field);
  --join-ee: var(--radius-field);
}

:root .prose {
  --tw-prose-body: color-mix(in oklab, var(--color-base-content) 80%, #0000);
  --tw-prose-headings: var(--color-base-content);
  --tw-prose-lead: var(--color-base-content);
  --tw-prose-links: var(--color-base-content);
  --tw-prose-bold: var(--color-base-content);
  --tw-prose-counters: var(--color-base-content);
  --tw-prose-bullets: color-mix(in oklab, var(--color-base-content) 50%, #0000);
  --tw-prose-hr: color-mix(in oklab, var(--color-base-content) 20%, #0000);
  --tw-prose-quotes: var(--color-base-content);
  --tw-prose-quote-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
  --tw-prose-captions: color-mix(in oklab, var(--color-base-content) 50%, #0000);
  --tw-prose-code: var(--color-base-content);
  --tw-prose-pre-code: var(--color-neutral-content);
  --tw-prose-pre-bg: var(--color-neutral);
  --tw-prose-th-borders: color-mix(in oklab, var(--color-base-content) 50%, #0000);
  --tw-prose-td-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
  --tw-prose-kbd: color-mix(in oklab, var(--color-base-content) 80%, #0000);
}

:root .prose :where(code):not(pre > code) {
  background-color: var(--color-base-200);
  border-radius: var(--radius-selector);
  border: var(--border) solid var(--color-base-300);
  padding-inline: 0.5em;
  font-weight: inherit;
}

:root .prose :where(code):not(pre > code):before, :root .prose :where(code):not(pre > code):after {
  display: none;
}

/*
  The default border color has changed to `currentcolor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/

/* Ensure all commonly used classes are included */

@utility prose {
  /* Force include typography classes */

  /* Better table cell text wrapping for mobile */

  & table {
    width: 100% !important;
    table-layout: auto !important;
  }

  & table td {
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
    -webkit-hyphens: auto !important;
            hyphens: auto !important;
    min-width: 0 !important;
    max-width: 0 !important;
    /* Force equal column distribution */
  }

  & table th {
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
    -webkit-hyphens: auto !important;
            hyphens: auto !important;
    min-width: 0 !important;
    max-width: 0 !important;
    /* Force equal column distribution */
  }

  /* Make code elements in table cells wrap nicely without breaking mid-word */

  & table td code {
    white-space: nowrap !important;
    overflow-wrap: break-word !important;
    word-break: normal !important;
    -webkit-hyphens: none !important;
            hyphens: none !important;
    font-size: 0.8rem !important;
    line-height: 1.3 !important;
    padding: 0.125rem 0.25rem !important;
    display: inline-block !important;
    max-width: 100% !important;
    vertical-align: top !important;
  }

  & table th code {
    white-space: nowrap !important;
    overflow-wrap: break-word !important;
    word-break: normal !important;
    -webkit-hyphens: none !important;
            hyphens: none !important;
    font-size: 0.8rem !important;
    line-height: 1.3 !important;
    padding: 0.125rem 0.25rem !important;
    display: inline-block !important;
    max-width: 100% !important;
    vertical-align: top !important;
  }

  @media (max-width: 767px) {
    & table td {
      padding: 0.25rem 0.375rem !important;
      font-size: 0.8rem !important;
      line-height: 1.4 !important;
    }

    & table th {
      padding: 0.25rem 0.375rem !important;
      font-size: 0.8rem !important;
      line-height: 1.4 !important;
    }

    & table td code {
      font-size: 0.75rem !important;
      white-space: normal !important;
      word-break: break-word !important;
    }

    & table th code {
      font-size: 0.75rem !important;
      white-space: normal !important;
      word-break: break-word !important;
    }
  }
}

/* Dark theme typography overrides */

[data-theme='dark'] .prose h1 {
  color: #e2e8f0 !important;
}

[data-theme='dark'] .prose h2 {
  color: #e2e8f0 !important;
}

[data-theme='dark'] .prose h3 {
  color: #e2e8f0 !important;
}

[data-theme='dark'] .prose h4 {
  color: #e2e8f0 !important;
}

[data-theme='dark'] .prose h5 {
  color: #e2e8f0 !important;
}

[data-theme='dark'] .prose h6 {
  color: #e2e8f0 !important;
}

[data-theme='dark'] .prose p {
  color: #cbd5e1 !important;
}

[data-theme='dark'] .prose ul {
  color: #cbd5e1 !important;
}

[data-theme='dark'] .prose ol {
  color: #cbd5e1 !important;
}

[data-theme='dark'] .prose li {
  color: #cbd5e1 !important;
}

[data-theme='dark'] .prose table {
  color: #cbd5e1 !important;
}

[data-theme='dark'] .prose th {
  color: #e2e8f0 !important;
  border-color: #475569 !important;
}

[data-theme='dark'] .prose td {
  border-color: #475569 !important;
}

[data-theme='dark'] .prose a {
  color: #60a5fa !important;
}

[data-theme='dark'] .prose a:hover {
  color: #93c5fd !important;
}

[data-theme='dark'] .prose strong {
  color: #f8fafc !important;
}

[data-theme='dark'] .prose em {
  color: #e2e8f0 !important;
}

[data-theme='dark'] .prose code {
  color: #f8fafc !important;
  background-color: #1e293b !important;
  padding: 0.2em 0.4em !important;
  border-radius: 0.25rem !important;
}

/* Fix code block styling in dark mode */

[data-theme='dark'] .prose pre {
  background-color: #0d1117 !important;
  color: #c9d1d9 !important;
  line-height: 1.45 !important;
  border: 1px solid #30363d !important;
}

[data-theme='dark'] .prose pre code {
  background-color: transparent !important;
  color: inherit !important;
  padding: 0 !important;
  line-height: inherit !important;
  font-size: inherit !important;
  /* Fix line height for code blocks in light mode too */
  [data-theme='light'] & pre {
    line-height: 1.45 !important;
  }
  [data-theme='light'] & pre code {
    line-height: inherit !important;
  }
}

@utility alert-success {
  /* Force include DaisyUI alert colors */

  border: none !important;

  border-width: 0 !important;

  border-color: transparent !important;

  box-shadow: none !important;

  outline: none !important;

  border-radius: 0.5rem !important;

  &::before {
    border: none !important;
    box-shadow: none !important;
    outline: none !important;
  }

  &::after {
    border: none !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & .hljs {
    background: rgba(
      0,
      0,
      0,
      0.05
    ) !important;
    /* Subtle background for code blocks */
  }

  & [class*='hljs-'] {
    /* Let syntax highlighting colors show through, but ensure readability */
    filter: contrast(1.2) brightness(0.8) !important;
  }
}

@utility btn {
  /* Force include DaisyUI components */

  /* Consistent navbar font sizes - using !important to match doc page specificity */

  .navbar & {
    font-size: 0.875rem !important;
    /* text-sm equivalent */
  }

  /* Safari-specific focus enhancement */

  /* Layout and navigation fixes */

  .navbar & {
    font-size: 0.875rem !important;
  }
}

/* Removed empty navbar utility - DaisyUI handles navbar styling */

@utility menu-lg {
  /* Fix menu-lg padding in navbar context - prevents extra height on desktop */

  .navbar & :where(li:not(.menu-title) > *:not(ul, details, .menu-title)) {
    padding-top: 0.25rem !important;
    /* Reduce from 0.75rem to 0.25rem */
    padding-bottom: 0.25rem !important;
    /* Reduce from 0.75rem to 0.25rem */
  }

  .navbar & :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
    padding-top: 0.25rem !important;
    /* Reduce from 0.75rem to 0.25rem */
    padding-bottom: 0.25rem !important;
    /* Reduce from 0.75rem to 0.25rem */
  }
}

@utility font-bold {
  .navbar & {
    /* text-base for logo/title */
    font-size: 1rem !important;
  }
}

@utility badge {
  /* Fix HTTP method badge alignment in headings */

  /* Fix HTTP method badge vertical alignment in headings */

  h1 & {
    vertical-align: baseline !important;
    margin-top: -0.375rem !important;
    /* Lift badges higher in headings */
    display: inline-block !important;
  }

  h2 & {
    vertical-align: baseline !important;
    margin-top: -0.375rem !important;
    /* Lift badges higher in headings */
    display: inline-block !important;
  }

  h3 & {
    vertical-align: baseline !important;
    margin-top: -0.375rem !important;
    /* Lift badges higher in headings */
    display: inline-block !important;
  }

  h4 & {
    vertical-align: baseline !important;
    margin-top: -0.375rem !important;
    /* Lift badges higher in headings */
    display: inline-block !important;
  }

  h5 & {
    vertical-align: baseline !important;
    margin-top: -0.375rem !important;
    /* Lift badges higher in headings */
    display: inline-block !important;
  }

  h6 & {
    vertical-align: baseline !important;
    margin-top: -0.375rem !important;
    /* Lift badges higher in headings */
    display: inline-block !important;
  }
}

/* Note: Force-included utility classes now handled by safelist in tailwind.config.js */

@utility tabs {
  /* Fix excessive padding around codeblocks in tabs */

  & .tab-content {
    padding: 1rem !important;
    /* Reduce from default p-6 (1.5rem) to 1rem */
    max-width: 100% !important;
    /* Prevent content from exceeding container */
    overflow-x: auto !important;
    /* Enable horizontal scrolling for wide content */
    box-sizing: border-box !important;
    /* Include padding in width calculation */
  }

  & .tab-content pre {
    margin: 0.5rem 0 !important;
    /* Reduce vertical margins on code blocks */
    max-width: 100% !important;
    /* Constrain code block width */
    overflow-x: auto !important;
    /* Enable horizontal scrolling */
    box-sizing: border-box !important;
    /* Include padding in width calculation */
  }

  & .tab-content pre code {
    padding: 0.75rem !important;
    /* Reasonable padding inside code blocks */
    line-height: 1.45 !important;
    /* Better line height for code */
    max-width: none !important;
    /* Allow code to be as wide as needed */
    white-space: pre !important;
    /* Preserve whitespace and prevent wrapping */
  }

  /* Add bottom margin to tabs container and constrain width */

  margin-bottom: 1.5rem !important;

  /* Add space at bottom of tabs */

  max-width: 100% !important;

  /* Prevent tabs from exceeding page width */

  overflow-x: auto !important;

  /* Enable horizontal scrolling if needed */

  box-sizing: border-box !important;

  /* Include borders/padding in width */

  /* Custom OkiDoki Component Overrides */

  & .tab-content pre {
    display: block !important;
    margin: 0 !important;
    padding: 0.75rem !important;
    background-color: #1f2937 !important;
    border-radius: 0.375rem !important;
    white-space: pre !important;
    font-family:
      ui-monospace, SFMono-Regular, 'SF Mono', Monaco, 'Cascadia Code',
      'Roboto Mono', Menlo, monospace !important;
    font-size: 0.875rem !important;
    line-height: 1.45 !important;
    overflow-x: auto !important;
  }

  & .tab-content pre code {
    display: inline !important;
    background: transparent !important;
    padding: 0 !important;
    margin: 0 !important;
    border: none !important;
    white-space: pre !important;
    font-family:
      ui-monospace, SFMono-Regular, 'SF Mono', Monaco, 'Cascadia Code',
      'Roboto Mono', Menlo, monospace !important;
    font-size: inherit !important;
    line-height: inherit !important;
  }

  /* Preserve whitespace on ALL nested elements but KEEP their colors */

  & .tab-content pre code * {
    white-space: pre !important;
    font-family:
      ui-monospace, SFMono-Regular, 'SF Mono', Monaco, 'Cascadia Code',
      'Roboto Mono', Menlo, monospace !important;
  }

  & .tab-content pre code span {
    white-space: pre !important;
    font-family:
      ui-monospace, SFMono-Regular, 'SF Mono', Monaco, 'Cascadia Code',
      'Roboto Mono', Menlo, monospace !important;
  }

  /* Add bottom margin to tabs container */

  margin-bottom: 1.5rem !important;
}

@utility tab-content {
  /* Fix excessive padding around codeblocks in tabs */

  .tabs & {
    padding: 1rem !important;
    /* Reduce from default p-6 (1.5rem) to 1rem */
    max-width: 100% !important;
    /* Prevent content from exceeding container */
    overflow-x: auto !important;
    /* Enable horizontal scrolling for wide content */
    box-sizing: border-box !important;
    /* Include padding in width calculation */
  }

  .tabs & pre {
    margin: 0.5rem 0 !important;
    /* Reduce vertical margins on code blocks */
    max-width: 100% !important;
    /* Constrain code block width */
    overflow-x: auto !important;
    /* Enable horizontal scrolling */
    box-sizing: border-box !important;
    /* Include padding in width calculation */
  }

  .tabs & pre code {
    padding: 0.75rem !important;
    /* Reasonable padding inside code blocks */
    line-height: 1.45 !important;
    /* Better line height for code */
    max-width: none !important;
    /* Allow code to be as wide as needed */
    white-space: pre !important;
    /* Preserve whitespace and prevent wrapping */
  }

  /* Custom OkiDoki Component Overrides */

  .tabs & pre {
    display: block !important;
    margin: 0 !important;
    padding: 0.75rem !important;
    background-color: #1f2937 !important;
    border-radius: 0.375rem !important;
    white-space: pre !important;
    font-family:
      ui-monospace, SFMono-Regular, 'SF Mono', Monaco, 'Cascadia Code',
      'Roboto Mono', Menlo, monospace !important;
    font-size: 0.875rem !important;
    line-height: 1.45 !important;
    overflow-x: auto !important;
  }

  .tabs & pre code {
    display: inline !important;
    background: transparent !important;
    padding: 0 !important;
    margin: 0 !important;
    border: none !important;
    white-space: pre !important;
    font-family:
      ui-monospace, SFMono-Regular, 'SF Mono', Monaco, 'Cascadia Code',
      'Roboto Mono', Menlo, monospace !important;
    font-size: inherit !important;
    line-height: inherit !important;
  }

  /* Preserve whitespace on ALL nested elements but KEEP their colors */

  .tabs & pre code * {
    white-space: pre !important;
    font-family:
      ui-monospace, SFMono-Regular, 'SF Mono', Monaco, 'Cascadia Code',
      'Roboto Mono', Menlo, monospace !important;
  }

  .tabs & pre code span {
    white-space: pre !important;
    font-family:
      ui-monospace, SFMono-Regular, 'SF Mono', Monaco, 'Cascadia Code',
      'Roboto Mono', Menlo, monospace !important;
  }
}

@utility alert {
  /* Reduce alert box height for single-line content */

  padding: 0.75rem 1rem !important;

  /* Reduce from default padding */

  min-height: auto !important;

  /* Remove minimum height constraint */

  & span {
    line-height: 1.4 !important;
    /* Better line height for single lines */
  }

  & span p {
    margin: 0 !important;
    /* Remove paragraph margins inside alerts */
  }

  /* Alert styling improvements */

  padding: 0.75rem 1rem !important;

  min-height: auto !important;

  border: none !important;

  box-shadow: none !important;

  outline: none !important;

  border: none !important;

  border-width: 0 !important;

  border-color: transparent !important;

  box-shadow: none !important;

  outline: none !important;

  border-radius: 0.5rem !important;

  &::before {
    border: none !important;
    box-shadow: none !important;
    outline: none !important;
  }

  &::after {
    border: none !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & span {
    line-height: 1.4 !important;
  }

  & span p {
    margin: 0 !important;
  }

  & * {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & p {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & ul {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & ol {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & li {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & code {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & pre {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & blockquote {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & h1 {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & h2 {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & h3 {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & h4 {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & h5 {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & h6 {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & strong {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & em {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & a {
    border: none !important;
    border-width: 0 !important;
    border-color: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  /* Alert styling and content handling */

  box-sizing: border-box !important;

  width: 100% !important;

  max-width: 100% !important;

  display: flex !important;

  flex-direction: row !important;

  /* Default to horizontal layout for simple alerts */

  align-items: center !important;

  /* Center align icon and text */

  justify-content: flex-start !important;

  text-align: left !important;

  overflow-x: auto !important;

  overflow-y: visible !important;

  min-width: 0 !important;

  gap: 0.75rem !important;

  /* Gap between icon and content */

  /* Switch to vertical layout when alerts contain block elements */

  & pre {
    width: 100% !important;
    order: 2 !important;
    /* Move code blocks after icon/text */
  }

  /* If alert has pre, ul, ol, or table elements, switch to column layout */

  &:has(pre) {
    flex-direction: column !important;
    align-items: flex-start !important;
    gap: 0.5rem !important;
  }

  /* Remove default margins from first and last elements in alerts */

  & > *:first-child {
    margin-top: 0 !important;
  }

  & > *:last-child {
    margin-bottom: 0 !important;
  }

  /* More aggressive content alignment */

  text-align: left !important;

  & * {
    text-align: left !important;
  }

  & p {
    text-align: left !important;
  }

  & div {
    text-align: left !important;
  }

  & span {
    text-align: left !important;
  }

  /* Word wrapping for text content, but not code blocks */

  & p {
    overflow-wrap: break-word !important;
    word-wrap: break-word !important;
  }

  & div {
    overflow-wrap: break-word !important;
    word-wrap: break-word !important;
  }

  & span {
    overflow-wrap: break-word !important;
    word-wrap: break-word !important;
  }

  & li {
    overflow-wrap: break-word !important;
    word-wrap: break-word !important;
  }

  & h1 {
    overflow-wrap: break-word !important;
    word-wrap: break-word !important;
  }

  & h2 {
    overflow-wrap: break-word !important;
    word-wrap: break-word !important;
  }

  & h3 {
    overflow-wrap: break-word !important;
    word-wrap: break-word !important;
  }

  & h4 {
    overflow-wrap: break-word !important;
    word-wrap: break-word !important;
  }

  & h5 {
    overflow-wrap: break-word !important;
    word-wrap: break-word !important;
  }

  & h6 {
    overflow-wrap: break-word !important;
    word-wrap: break-word !important;
  }

  /* Override DaisyUI's flex centering for mobile */

  @media (max-width: 768px) {
    display: block !important;

    text-align: left !important;

    & > * {
      display: block !important;
      text-align: left !important;
      width: 100% !important;
    }
  }

  /* Fix markdown elements inside alerts for both light and dark modes */

  & code {
    background-color: rgba(0, 0, 0, 0.1) !important;
    color: #1f2937 !important;
    /* Dark text for better contrast on colored backgrounds */
    padding: 0.2em 0.4em !important;
    border-radius: 0.25rem !important;
    font-size: 0.875em !important;
    font-weight: 500 !important;
  }

  & pre {
    background-color: rgba(0, 0, 0, 0.05) !important;
    border: 1px solid rgba(0, 0, 0, 0.1) !important;
    border-radius: 0.375rem !important;
    padding: 1rem !important;
    margin: 0.5rem 0 !important;
    overflow-x: auto !important;
    overflow-y: hidden !important;
    max-width: 100% !important;
    width: 100% !important;
    min-width: 0 !important;
    box-sizing: border-box !important;
    text-align: left !important;
    /* Ensure code blocks are left-aligned */
    white-space: pre !important;
    /* Preserve formatting and allow scrolling */
    word-wrap: normal !important;
    overflow-wrap: normal !important;
    display: block !important;
    flex-shrink: 1 !important;
    /* Allow shrinking in flex container */
    -webkit-overflow-scrolling: touch !important;
    /* Smooth scrolling on mobile */
    scrollbar-width: thin !important;
    /* Thin scrollbar */
  }

  & pre code {
    background-color: transparent !important;
    padding: 0 !important;
    border-radius: 0 !important;
    font-size: inherit !important;
    color: #1f2937 !important;
    /* Dark text for better contrast */
    font-weight: 500 !important;
    white-space: pre !important;
    /* Preserve formatting, no wrapping */
    display: inline !important;
    word-wrap: normal !important;
    overflow-wrap: normal !important;
  }

  /* Default/neutral alerts in light mode */

  &:not(.alert-warning):not(.alert-info):not(.alert-success):not(.alert-error)
    code {
    color: #374151 !important;
    /* Darker text for neutral alerts in light mode */
    background-color: rgba(0, 0, 0, 0.05) !important;
    white-space: pre !important;
    /* Preserve formatting, no wrapping */
  }

  &:not(.alert-warning):not(.alert-info):not(.alert-success):not(.alert-error)
    pre
    code {
    color: #374151 !important;
    /* Darker text for neutral alerts in light mode */
    background-color: rgba(0, 0, 0, 0.05) !important;
    white-space: pre !important;
    /* Preserve formatting, no wrapping */
  }

  &:not(.alert-error) .hljs {
    background: rgba(
      0,
      0,
      0,
      0.05
    ) !important;
    /* Subtle background for code blocks */
  }

  &:not(.alert-error) [class*='hljs-'] {
    /* Let syntax highlighting colors show through, but ensure readability */
    filter: contrast(1.2) brightness(0.8) !important;
  }

  /* Light mode link colors for alerts */

  & a {
    color: #1f2937 !important;
    text-decoration: underline !important;
    font-weight: 600 !important;
  }

  & a:hover {
    color: #000000 !important;
  }
}

@utility code-block-container {
  /* Responsive table cell sizing */

  /* Copy to clipboard button for code blocks */

  position: relative !important;

  &:hover .copy-button {
    opacity: 1 !important;
  }
}

@utility copy-button {
  /* Let DaisyUI btn-neutral handle theming */

  z-index: 10 !important;

  transition: all 0.2s ease !important;

  /* Enhance visibility with shadow */

  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15) !important;

  &:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2) !important;
  }

  @media (max-width: 1023px) {
    z-index: 1 !important;
  }

  z-index: 10 !important;
}

/* Code block title styles */

.code-block-title {
  font-family: ui-monospace, SFMono-Regular, 'SF Mono', Monaco, 'Cascadia Code',
    'Roboto Mono', Menlo, monospace !important;
  font-size: 0.813rem !important;
  font-weight: 600 !important;
  padding: 0.5rem 0.75rem !important;
  background-color: rgba(0, 0, 0, 0.05) !important;
  border: 1px solid rgba(0, 0, 0, 0.1) !important;
  border-bottom: none !important;
  color: #374151 !important;
  border-radius: 0.375rem 0.375rem 0 0 !important;
  margin: 0 !important;
}

.code-block-title + button + pre {
  border-radius: 0 0 0.375rem 0.375rem !important;
  margin-top: 0 !important;
}

/* Highlighted line in code blocks */

.highlighted-line {
  display: inline-block !important;
  width: calc(100% + 1.5rem) !important;
  background-color: rgba(251, 191, 36, 0.2) !important;
  border-left: 3px solid rgba(245, 158, 11, 0.8) !important;
  margin-left: -0.75rem !important;
  padding-left: calc(0.75rem - 3px) !important;
  padding-right: 0.75rem !important;
  box-shadow: inset 0 0 0 1px rgba(251, 191, 36, 0.1) !important;
  line-height: inherit !important;
}

@utility dropdown {
  /* Override DaisyUI automatic dropdown focus behavior for search dropdowns */

  &:focus-within [id*='search-results'].hidden {
    visibility: hidden !important;
    opacity: 0 !important;
    transform: scale(0.95) !important;
  }

  &:focus [id*='search-results'].hidden {
    visibility: hidden !important;
    opacity: 0 !important;
    transform: scale(0.95) !important;
  }
}

@utility hidden {
  /* Override DaisyUI automatic dropdown focus behavior for search dropdowns */

  .dropdown:focus-within &[id*='search-results'] {
    visibility: hidden !important;
    opacity: 0 !important;
    transform: scale(0.95) !important;
  }

  .dropdown:focus &[id*='search-results'] {
    visibility: hidden !important;
    opacity: 0 !important;
    transform: scale(0.95) !important;
  }
}

@utility theme-sun-icon {
  /* Theme switcher icon visibility based on DaisyUI themes */

  /* Default: show sun, hide moon */

  opacity: 1;

  /* Dark themes: hide sun, show moon */

  [data-theme='dark'] & {
    opacity: 0;
  }

  [data-theme='forest'] & {
    opacity: 0;
  }

  [data-theme='night'] & {
    opacity: 0;
  }

  [data-theme='black'] & {
    opacity: 0;
  }

  [data-theme='luxury'] & {
    opacity: 0;
  }

  [data-theme='dracula'] & {
    opacity: 0;
  }

  [data-theme='halloween'] & {
    opacity: 0;
  }

  [data-theme='business'] & {
    opacity: 0;
  }

  [data-theme='synthwave'] & {
    opacity: 0;
  }

  [data-theme='cyberpunk'] & {
    opacity: 0;
  }

  [data-theme='coffee'] & {
    opacity: 0;
  }

  [data-theme='dim'] & {
    opacity: 0;
  }

  [data-theme='sunset'] & {
    opacity: 0;
  }
}

@utility theme-moon-icon {
  opacity: 0;

  [data-theme='dark'] & {
    opacity: 1;
  }

  [data-theme='forest'] & {
    opacity: 1;
  }

  [data-theme='night'] & {
    opacity: 1;
  }

  [data-theme='black'] & {
    opacity: 1;
  }

  [data-theme='luxury'] & {
    opacity: 1;
  }

  [data-theme='dracula'] & {
    opacity: 1;
  }

  [data-theme='halloween'] & {
    opacity: 1;
  }

  [data-theme='business'] & {
    opacity: 1;
  }

  [data-theme='synthwave'] & {
    opacity: 1;
  }

  [data-theme='cyberpunk'] & {
    opacity: 1;
  }

  [data-theme='coffee'] & {
    opacity: 1;
  }

  [data-theme='dim'] & {
    opacity: 1;
  }

  [data-theme='sunset'] & {
    opacity: 1;
  }
}

@utility hljs {
  /* Ensure highlight.js styles work properly in dark mode */

  [data-theme='dark'] & {
    background: #0d1117 !important;
    color: #c9d1d9 !important;
    line-height: 1.45 !important;
  }

  /* General hljs line-height fix for both themes */

  line-height: 1.45 !important;

  /* Preserve syntax highlighting in non-error alerts */

  .alert-info & {
    background: rgba(
      0,
      0,
      0,
      0.05
    ) !important;
    /* Subtle background for code blocks */
  }

  .alert-warning & {
    background: rgba(
      0,
      0,
      0,
      0.05
    ) !important;
    /* Subtle background for code blocks */
  }

  .alert-success & {
    background: rgba(
      0,
      0,
      0,
      0.05
    ) !important;
    /* Subtle background for code blocks */
  }

  .alert:not(.alert-error) & {
    background: rgba(
      0,
      0,
      0,
      0.05
    ) !important;
    /* Subtle background for code blocks */
  }

  /* Allow normal syntax highlighting in error alert code blocks */

  .alert-error & {
    background: #0d1117 !important;
    /* Dark background for highlight.js */
    color: #c9d1d9 !important;
  }
}

@utility search-highlight {
  /* Search highlighting styles */

  background-color: #fef08a !important;

  color: #854d0e !important;

  padding: 0.1em 0.2em !important;

  border-radius: 0.2em !important;

  font-weight: 500 !important;

  [data-theme='dark'] & {
    background-color: #ca8a04 !important;
    color: #fefce8 !important;
    box-shadow: 0 0 0 1px rgba(251, 191, 36, 0.3) !important;
  }
}

@utility alert-error {
  border: none !important;

  border-width: 0 !important;

  border-color: transparent !important;

  box-shadow: none !important;

  outline: none !important;

  border-radius: 0.5rem !important;

  &::before {
    border: none !important;
    box-shadow: none !important;
    outline: none !important;
  }

  &::after {
    border: none !important;
    box-shadow: none !important;
    outline: none !important;
  }

  /* Error alerts: Keep normal code block styling with dark background */

  & pre {
    background-color: #0d1117 !important;
    /* Dark background for code blocks */
    color: #c9d1d9 !important;
    /* Light text for code blocks */
    border: 1px solid #30363d !important;
    overflow-x: auto !important;
    /* Ensure horizontal scrolling */
    overflow-y: hidden !important;
    max-width: 100% !important;
    width: 100% !important;
    min-width: 0 !important;
    white-space: pre !important;
    /* Preserve formatting and allow scrolling */
    word-wrap: normal !important;
    overflow-wrap: normal !important;
    display: block !important;
    flex-shrink: 1 !important;
    /* Allow shrinking in flex container */
  }

  & pre code {
    background-color: transparent !important;
    /* Transparent background inside pre */
    color: inherit !important;
    /* Inherit from pre */
    white-space: pre !important;
    /* Preserve formatting, no wrapping */
    display: inline !important;
    word-wrap: normal !important;
    overflow-wrap: normal !important;
    padding: 0 !important;
  }

  /* Allow normal syntax highlighting in error alert code blocks */

  & .hljs {
    background: #0d1117 !important;
    /* Dark background for highlight.js */
    color: #c9d1d9 !important;
  }

  /* Inline code in error alerts should be subtle but readable */

  & code:not(pre code) {
    background-color: rgba(0, 0, 0, 0.3) !important;
    color: #ffffff !important;
    padding: 0.2em 0.4em !important;
    border-radius: 0.25rem !important;
  }

  & a {
    color: #ffffff !important;
  }

  & a:hover {
    color: #e5e5e5 !important;
  }
}

@utility alert-warning {
  border: none !important;

  border-width: 0 !important;

  border-color: transparent !important;

  box-shadow: none !important;

  outline: none !important;

  border-radius: 0.5rem !important;

  &::before {
    border: none !important;
    box-shadow: none !important;
    outline: none !important;
  }

  &::after {
    border: none !important;
    box-shadow: none !important;
    outline: none !important;
  }

  & .hljs {
    background: rgba(
      0,
      0,
      0,
      0.05
    ) !important;
    /* Subtle background for code blocks */
  }

  & [class*='hljs-'] {
    /* Let syntax highlighting colors show through, but ensure readability */
    filter: contrast(1.2) brightness(0.8) !important;
  }
}

@utility alert-info {
  border: none !important;

  border-width: 0 !important;

  border-color: transparent !important;

  box-shadow: none !important;

  outline: none !important;

  border-radius: 0.5rem !important;

  &::before {
    border: none !important;
    box-shadow: none !important;
    outline: none !important;
  }

  &::after {
    border: none !important;
    box-shadow: none !important;
    outline: none !important;
  }

  /* Preserve syntax highlighting in non-error alerts */

  & .hljs {
    background: rgba(
      0,
      0,
      0,
      0.05
    ) !important;
    /* Subtle background for code blocks */
  }

  /* Allow syntax highlighting colors in non-error alerts */

  & [class*='hljs-'] {
    /* Let syntax highlighting colors show through, but ensure readability */
    filter: contrast(1.2) brightness(0.8) !important;
  }
}

@utility drawer-side {
  z-index: 999 !important;
}

@utility drawer-content {
  overscroll-behavior: none !important;
}

@utility page-nav-container {
  position: sticky;

  top: 5rem;
}

@utility desktop-nav-fixed {
  @media (max-width: 1023px) {
    display: none !important;
  }
}

@utility flex-nav-container {
  @media (max-width: 1023px) {
    display: block !important;
  }
}

@utility dropdown-content {
  z-index: 9999 !important;

  .lg\\:hidden & {
    z-index: 10000 !important;
    position: relative;
  }
}

/* Mobile dropdown positioning */

@media (max-width: 1023px) {
  .lg\\:hidden .dropdown-content {
    z-index: 10000 !important;
    position: relative;
  }
}

/* Custom OkiDoki Component Overrides */

@media (min-width: 1024px) {
  .lg\:drawer-open > .drawer-side {
    overflow-y: auto;
  }

  .lg\:drawer-open > .drawer-toggle {
    display: none;
  }

  .lg\:drawer-open > .drawer-toggle ~ .drawer-side {
    pointer-events: auto;
    visibility: visible;
    position: sticky;
    display: block;
    width: auto;
    overscroll-behavior: auto;
    opacity: 100%;
  }

  .lg\:drawer-open > .drawer-toggle ~ .drawer-side > .drawer-overlay {
    cursor: default;
    background-color: transparent;
  }

  .lg\:drawer-open > .drawer-toggle ~ .drawer-side > *:not(.drawer-overlay) {
    translate: 0%;
  }

  [dir="rtl"] .lg\:drawer-open > .drawer-toggle ~ .drawer-side > *:not(.drawer-overlay) {
    translate: 0%;
  }

  .lg\:drawer-open > .drawer-toggle:checked ~ .drawer-side {
    pointer-events: auto;
    visibility: visible;
  }
}

@media (prefers-color-scheme: dark) {
  .dark\:prose-invert {
    --tw-prose-body: var(--tw-prose-invert-body);
    --tw-prose-headings: var(--tw-prose-invert-headings);
    --tw-prose-lead: var(--tw-prose-invert-lead);
    --tw-prose-links: var(--tw-prose-invert-links);
    --tw-prose-bold: var(--tw-prose-invert-bold);
    --tw-prose-counters: var(--tw-prose-invert-counters);
    --tw-prose-bullets: var(--tw-prose-invert-bullets);
    --tw-prose-hr: var(--tw-prose-invert-hr);
    --tw-prose-quotes: var(--tw-prose-invert-quotes);
    --tw-prose-quote-borders: var(--tw-prose-invert-quote-borders);
    --tw-prose-captions: var(--tw-prose-invert-captions);
    --tw-prose-kbd: var(--tw-prose-invert-kbd);
    --tw-prose-kbd-shadows: var(--tw-prose-invert-kbd-shadows);
    --tw-prose-code: var(--tw-prose-invert-code);
    --tw-prose-pre-code: var(--tw-prose-invert-pre-code);
    --tw-prose-pre-bg: var(--tw-prose-invert-pre-bg);
    --tw-prose-th-borders: var(--tw-prose-invert-th-borders);
    --tw-prose-td-borders: var(--tw-prose-invert-td-borders);
  }
}

.last\:border-b-0:last-child {
  border-bottom-width: 0px;
}

.hover\:-translate-y-1:hover {
  --tw-translate-y: -0.25rem;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

.hover\:bg-base-100:hover {
  background-color: var(--color-base-100);
}

.hover\:bg-base-200:hover {
  background-color: var(--color-base-200);
}

.hover\:bg-base-300:hover {
  background-color: var(--color-base-300);
}

.hover\:bg-primary-content:hover {
  background-color: var(--color-primary-content);
}

.hover\:text-primary:hover {
  color: var(--color-primary);
}

.hover\:shadow-xl:hover {
  --tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
  --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

@media (min-width: 640px) {
  .sm\:flex-row {
    flex-direction: row;
  }
}

@media (min-width: 768px) {
  .md\:w-auto {
    width: auto;
  }

  .md\:grid-cols-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }

  .md\:text-2xl {
    font-size: 1.5rem;
    line-height: 2rem;
  }

  .md\:text-6xl {
    font-size: 3.75rem;
    line-height: 1;
  }
}

@media (min-width: 1024px) {
  .lg\:order-1 {
    order: 1;
  }

  .lg\:order-2 {
    order: 2;
  }

  .lg\:m-1 {
    margin: 0.25rem;
  }

  .lg\:mt-4 {
    margin-top: 1rem;
  }

  .lg\:block {
    display: block;
  }

  .lg\:flex {
    display: flex;
  }

  .lg\:hidden {
    display: none;
  }

  .lg\:w-64 {
    width: 16rem;
  }

  .lg\:flex-shrink-0 {
    flex-shrink: 0;
  }

  .lg\:flex-row {
    flex-direction: row;
  }

  .lg\:items-center {
    align-items: center;
  }

  .lg\:gap-12 {
    gap: 3rem;
  }

  .lg\:gap-4 {
    gap: 1rem;
  }

  .lg\:gap-6 {
    gap: 1.5rem;
  }

  .lg\:p-8 {
    padding: 2rem;
  }

  .lg\:px-8 {
    padding-left: 2rem;
    padding-right: 2rem;
  }
}

@media (prefers-color-scheme: dark) {
  .dark\:from-purple-800\/60 {
    --tw-gradient-from: rgb(107 33 168 / 0.6) var(--tw-gradient-from-position);
    --tw-gradient-to: rgb(107 33 168 / 0) var(--tw-gradient-to-position);
    --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
  }

  .dark\:to-indigo-800\/60 {
    --tw-gradient-to: rgb(55 48 163 / 0.6) var(--tw-gradient-to-position);
  }
}

.prose-th\:\[\&\[align\=center\]\]\:text-center[align=center] :is(:where(th):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  text-align: center;
}

.prose-td\:\[\&\[align\=center\]\]\:text-center[align=center] :is(:where(td):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  text-align: center;
}

.prose-th\:\[\&\[align\=right\]\]\:text-right[align=right] :is(:where(th):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  text-align: right;
}

.prose-td\:\[\&\[align\=right\]\]\:text-right[align=right] :is(:where(td):not(:where([class~="not-prose"],[class~="not-prose"] *))) {
  text-align: right;
}